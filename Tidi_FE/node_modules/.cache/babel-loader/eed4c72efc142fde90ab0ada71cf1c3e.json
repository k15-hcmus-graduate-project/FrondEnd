{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getState = getState;\nexports.initializeState = initializeState;\nexports.removeState = removeState;\nexports.getServerData = getServerData;\nexports.setServerData = setServerData;\nexports.getPendingOps = getPendingOps;\nexports.setPendingOp = setPendingOp;\nexports.pushPendingState = pushPendingState;\nexports.popPendingState = popPendingState;\nexports.mergeFirstPendingState = mergeFirstPendingState;\nexports.getObjectCache = getObjectCache;\nexports.estimateAttribute = estimateAttribute;\nexports.estimateAttributes = estimateAttributes;\nexports.commitServerChanges = commitServerChanges;\nexports.enqueueTask = enqueueTask;\nexports.clearAllState = clearAllState;\nexports.duplicateState = duplicateState;\n\nvar ObjectStateMutations = _interopRequireWildcard(require(\"./ObjectStateMutations\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar objectState\n/*: {\n  [className: string]: {\n    [id: string]: State\n  }\n}*/\n= {};\n\nfunction getState(obj\n/*: ObjectIdentifier*/\n)\n/*: ?State*/\n{\n  var classData = objectState[obj.className];\n\n  if (classData) {\n    return classData[obj.id] || null;\n  }\n\n  return null;\n}\n\nfunction initializeState(obj\n/*: ObjectIdentifier*/\n, initial\n/*:: ?: State*/\n)\n/*: State*/\n{\n  var state = getState(obj);\n\n  if (state) {\n    return state;\n  }\n\n  if (!objectState[obj.className]) {\n    objectState[obj.className] = {};\n  }\n\n  if (!initial) {\n    initial = ObjectStateMutations.defaultState();\n  }\n\n  state = objectState[obj.className][obj.id] = initial;\n  return state;\n}\n\nfunction removeState(obj\n/*: ObjectIdentifier*/\n)\n/*: ?State*/\n{\n  var state = getState(obj);\n\n  if (state === null) {\n    return null;\n  }\n\n  delete objectState[obj.className][obj.id];\n  return state;\n}\n\nfunction getServerData(obj\n/*: ObjectIdentifier*/\n)\n/*: AttributeMap*/\n{\n  var state = getState(obj);\n\n  if (state) {\n    return state.serverData;\n  }\n\n  return {};\n}\n\nfunction setServerData(obj\n/*: ObjectIdentifier*/\n, attributes\n/*: AttributeMap*/\n) {\n  var serverData = initializeState(obj).serverData;\n  ObjectStateMutations.setServerData(serverData, attributes);\n}\n\nfunction getPendingOps(obj\n/*: ObjectIdentifier*/\n)\n/*: Array<OpsMap>*/\n{\n  var state = getState(obj);\n\n  if (state) {\n    return state.pendingOps;\n  }\n\n  return [{}];\n}\n\nfunction setPendingOp(obj\n/*: ObjectIdentifier*/\n, attr\n/*: string*/\n, op\n/*: ?Op*/\n) {\n  var pendingOps = initializeState(obj).pendingOps;\n  ObjectStateMutations.setPendingOp(pendingOps, attr, op);\n}\n\nfunction pushPendingState(obj\n/*: ObjectIdentifier*/\n) {\n  var pendingOps = initializeState(obj).pendingOps;\n  ObjectStateMutations.pushPendingState(pendingOps);\n}\n\nfunction popPendingState(obj\n/*: ObjectIdentifier*/\n)\n/*: OpsMap*/\n{\n  var pendingOps = initializeState(obj).pendingOps;\n  return ObjectStateMutations.popPendingState(pendingOps);\n}\n\nfunction mergeFirstPendingState(obj\n/*: ObjectIdentifier*/\n) {\n  var pendingOps = getPendingOps(obj);\n  ObjectStateMutations.mergeFirstPendingState(pendingOps);\n}\n\nfunction getObjectCache(obj\n/*: ObjectIdentifier*/\n)\n/*: ObjectCache*/\n{\n  var state = getState(obj);\n\n  if (state) {\n    return state.objectCache;\n  }\n\n  return {};\n}\n\nfunction estimateAttribute(obj\n/*: ObjectIdentifier*/\n, attr\n/*: string*/\n)\n/*: mixed*/\n{\n  var serverData = getServerData(obj);\n  var pendingOps = getPendingOps(obj);\n  return ObjectStateMutations.estimateAttribute(serverData, pendingOps, obj.className, obj.id, attr);\n}\n\nfunction estimateAttributes(obj\n/*: ObjectIdentifier*/\n)\n/*: AttributeMap*/\n{\n  var serverData = getServerData(obj);\n  var pendingOps = getPendingOps(obj);\n  return ObjectStateMutations.estimateAttributes(serverData, pendingOps, obj.className, obj.id);\n}\n\nfunction commitServerChanges(obj\n/*: ObjectIdentifier*/\n, changes\n/*: AttributeMap*/\n) {\n  var state = initializeState(obj);\n  ObjectStateMutations.commitServerChanges(state.serverData, state.objectCache, changes);\n}\n\nfunction enqueueTask(obj\n/*: ObjectIdentifier*/\n, task\n/*: () => Promise*/\n)\n/*: Promise*/\n{\n  var state = initializeState(obj);\n  return state.tasks.enqueue(task);\n}\n\nfunction clearAllState() {\n  objectState = {};\n}\n\nfunction duplicateState(source\n/*: {id: string}*/\n, dest\n/*: {id: string}*/\n) {\n  dest.id = source.id;\n}","map":null,"metadata":{},"sourceType":"script"}