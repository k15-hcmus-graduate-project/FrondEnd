{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactPropTypesLibElementType = require('react-prop-types/lib/elementType');\n\nvar _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _FormControlFeedback = require('./FormControlFeedback');\n\nvar _FormControlFeedback2 = _interopRequireDefault(_FormControlFeedback);\n\nvar _FormControlStatic = require('./FormControlStatic');\n\nvar _FormControlStatic2 = _interopRequireDefault(_FormControlStatic);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar propTypes = {\n  componentClass: _reactPropTypesLibElementType2['default'],\n\n  /**\n   * Only relevant if `componentClass` is `'input'`.\n   */\n  type: _react2['default'].PropTypes.string,\n\n  /**\n   * Uses `controlId` from `<FormGroup>` if not explicitly specified.\n   */\n  id: _react2['default'].PropTypes.string\n};\nvar defaultProps = {\n  componentClass: 'input'\n};\nvar contextTypes = {\n  $bs_formGroup: _react2['default'].PropTypes.object\n};\n\nvar FormControl = function (_React$Component) {\n  _inherits(FormControl, _React$Component);\n\n  function FormControl() {\n    _classCallCheck(this, FormControl);\n\n    _React$Component.apply(this, arguments);\n  }\n\n  FormControl.prototype.render = function render() {\n    var formGroup = this.context.$bs_formGroup;\n    var controlId = formGroup && formGroup.controlId;\n    var _props = this.props;\n    var Component = _props.componentClass;\n    var type = _props.type;\n    var _props$id = _props.id;\n    var id = _props$id === undefined ? controlId : _props$id;\n    var className = _props.className;\n\n    var props = _objectWithoutProperties(_props, ['componentClass', 'type', 'id', 'className']);\n\n    var _splitBsProps = _utilsBootstrapUtils.splitBsProps(props);\n\n    var bsProps = _splitBsProps[0];\n    var elementProps = _splitBsProps[1];\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](controlId == null || id === controlId, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : undefined; // input[type=\"file\"] should not have .form-control.\n\n    var classes = undefined;\n\n    if (type !== 'file') {\n      classes = _utilsBootstrapUtils.getClassSet(bsProps);\n    }\n\n    return _react2['default'].createElement(Component, _extends({}, elementProps, {\n      type: type,\n      id: id,\n      className: _classnames2['default'](className, classes)\n    }));\n  };\n\n  return FormControl;\n}(_react2['default'].Component);\n\nFormControl.propTypes = propTypes;\nFormControl.defaultProps = defaultProps;\nFormControl.contextTypes = contextTypes;\nFormControl.Feedback = _FormControlFeedback2['default'];\nFormControl.Static = _FormControlStatic2['default'];\nexports['default'] = _utilsBootstrapUtils.bsClass('form-control', FormControl);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}