{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/lap12548/Documents/hcmus/TOTNGHIEP/GITHUB/FrondEnd/Tidi_FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/lap12548/Documents/hcmus/TOTNGHIEP/GITHUB/FrondEnd/Tidi_FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/lap12548/Documents/hcmus/TOTNGHIEP/GITHUB/FrondEnd/Tidi_FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/lap12548/Documents/hcmus/TOTNGHIEP/GITHUB/FrondEnd/Tidi_FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/lap12548/Documents/hcmus/TOTNGHIEP/GITHUB/FrondEnd/Tidi_FE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * <p>A Parse.Session object is a local representation of a revocable session.\n * This class is a subclass of a Parse.Object, and retains the same\n * functionality of a Parse.Object.</p>\n * @alias Parse.Session\n * @extends Parse.Object\n */\n\n\nvar ParseSession =\n/*#__PURE__*/\nfunction (_ParseObject$default) {\n  _inherits(ParseSession, _ParseObject$default);\n\n  /**\n   *\n   * @param {Object} attributes The initial set of data to store in the user.\n   */\n  function ParseSession(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    _classCallCheck(this, ParseSession);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ParseSession).call(this, '_Session'));\n\n    if (attributes && typeof attributes === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error('Can\\'t create an invalid Session');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Returns the session token string.\n    * @return {String}\n   */\n\n\n  _createClass(ParseSession, [{\n    key: \"getSessionToken\",\n    value: function getSessionToken()\n    /*: string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function readOnlyAttributes() {\n      return ['createdWith', 'expiresAt', 'installationId', 'restricted', 'sessionToken', 'user'];\n    }\n    /**\n     * Retrieves the Session object for the currently logged in session.\n      * @static\n     * @return {Promise} A promise that is resolved with the Parse.Session\n     *   object after it has been fetched. If there is no current user, the\n     *   promise will be rejected.\n     */\n\n  }, {\n    key: \"current\",\n    value: function current(options\n    /*: FullOptions*/\n    ) {\n      options = options || {};\n\n      var controller = _CoreManager.default.getSessionController();\n\n      var sessionOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        sessionOptions.useMasterKey = options.useMasterKey;\n      }\n\n      return _ParseUser.default.currentAsync().then(function (user) {\n        if (!user) {\n          return Promise.reject('There is no current user.');\n        }\n\n        sessionOptions.sessionToken = user.getSessionToken();\n        return controller.getSession(sessionOptions);\n      });\n    }\n    /**\n     * Determines whether the current session token is revocable.\n     * This method is useful for migrating Express.js or Node.js web apps to\n     * use revocable sessions. If you are migrating an app that uses the Parse\n     * SDK in the browser only, please use Parse.User.enableRevocableSession()\n     * instead, so that sessions can be automatically upgraded.\n      * @static\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isCurrentSessionRevocable\",\n    value: function isCurrentSessionRevocable()\n    /*: boolean*/\n    {\n      var currentUser = _ParseUser.default.current();\n\n      if (currentUser) {\n        return (0, _isRevocableSession.default)(currentUser.getSessionToken() || '');\n      }\n\n      return false;\n    }\n  }]);\n\n  return ParseSession;\n}(_ParseObject.default);\n\n_ParseObject.default.registerSubclass('_Session', ParseSession);\n\nvar DefaultController = {\n  getSession: function getSession(options\n  /*: RequestOptions*/\n  )\n  /*: Promise*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var session = new ParseSession();\n    return RESTController.request('GET', 'sessions/me', {}, options).then(function (sessionData) {\n      session._finishFetch(sessionData);\n\n      session._setExisted(true);\n\n      return session;\n    });\n  }\n};\n\n_CoreManager.default.setSessionController(DefaultController);\n\nvar _default = ParseSession;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}