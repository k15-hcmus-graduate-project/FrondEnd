{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolvingPromise = resolvingPromise;\nexports.when = when;\nexports.continueWhile = continueWhile;\n\nfunction resolvingPromise() {\n  var res;\n  var rej;\n  var promise = new Promise(function (resolve, reject) {\n    res = resolve;\n    rej = reject;\n  });\n  promise.resolve = res;\n  promise.reject = rej;\n  return promise;\n}\n\nfunction when(promises) {\n  var objects;\n  var arrayArgument = Array.isArray(promises);\n\n  if (arrayArgument) {\n    objects = promises;\n  } else {\n    objects = arguments;\n  }\n\n  var total = objects.length;\n  var hadError = false;\n  var results = [];\n  var returnValue = arrayArgument ? [results] : results;\n  var errors = [];\n  results.length = objects.length;\n  errors.length = objects.length;\n\n  if (total === 0) {\n    return Promise.resolve(returnValue);\n  }\n\n  var promise = new resolvingPromise();\n\n  var resolveOne = function resolveOne() {\n    total--;\n\n    if (total <= 0) {\n      if (hadError) {\n        promise.reject(errors);\n      } else {\n        promise.resolve(returnValue);\n      }\n    }\n  };\n\n  var chain = function chain(object, index) {\n    if (object && typeof object.then === 'function') {\n      object.then(function (result) {\n        results[index] = result;\n        resolveOne();\n      }, function (error) {\n        errors[index] = error;\n        hadError = true;\n        resolveOne();\n      });\n    } else {\n      results[index] = object;\n      resolveOne();\n    }\n  };\n\n  for (var i = 0; i < objects.length; i++) {\n    chain(objects[i], i);\n  }\n\n  return promise;\n}\n\nfunction continueWhile(test, emitter) {\n  if (test()) {\n    return emitter().then(function () {\n      return continueWhile(test, emitter);\n    });\n  }\n\n  return Promise.resolve();\n}","map":null,"metadata":{},"sourceType":"script"}