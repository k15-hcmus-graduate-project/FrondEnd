{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _CarouselCaption = require('./CarouselCaption');\n\nvar _CarouselCaption2 = _interopRequireDefault(_CarouselCaption);\n\nvar _CarouselItem = require('./CarouselItem');\n\nvar _CarouselItem2 = _interopRequireDefault(_CarouselItem);\n\nvar _Glyphicon = require('./Glyphicon');\n\nvar _Glyphicon2 = _interopRequireDefault(_Glyphicon);\n\nvar _SafeAnchor = require('./SafeAnchor');\n\nvar _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsValidComponentChildren = require('./utils/ValidComponentChildren');\n\nvar _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren); // TODO: `slide` should be `animate`.\n// TODO: Use uncontrollable.\n\n\nvar propTypes = {\n  slide: _react2['default'].PropTypes.bool,\n  indicators: _react2['default'].PropTypes.bool,\n  interval: _react2['default'].PropTypes.number,\n  controls: _react2['default'].PropTypes.bool,\n  pauseOnHover: _react2['default'].PropTypes.bool,\n  wrap: _react2['default'].PropTypes.bool,\n\n  /**\n   * Callback fired when the active item changes.\n   *\n   * ```js\n   * (eventKey: any) => any | (eventKey: any, event: Object) => any\n   * ```\n   *\n   * If this callback takes two or more arguments, the second argument will\n   * be a persisted event object with `direction` set to the direction of the\n   * transition.\n   */\n  onSelect: _react2['default'].PropTypes.func,\n  onSlideEnd: _react2['default'].PropTypes.func,\n  activeIndex: _react2['default'].PropTypes.number,\n  defaultActiveIndex: _react2['default'].PropTypes.number,\n  direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),\n  prevIcon: _react2['default'].PropTypes.node,\n  nextIcon: _react2['default'].PropTypes.node\n};\nvar defaultProps = {\n  slide: true,\n  interval: 5000,\n  pauseOnHover: true,\n  wrap: true,\n  indicators: true,\n  controls: true,\n  prevIcon: _react2['default'].createElement(_Glyphicon2['default'], {\n    glyph: 'chevron-left'\n  }),\n  nextIcon: _react2['default'].createElement(_Glyphicon2['default'], {\n    glyph: 'chevron-right'\n  })\n};\n\nvar Carousel = function (_React$Component) {\n  _inherits(Carousel, _React$Component);\n\n  function Carousel(props, context) {\n    _classCallCheck(this, Carousel);\n\n    _React$Component.call(this, props, context);\n\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n    this.handlePrev = this.handlePrev.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.handleItemAnimateOutEnd = this.handleItemAnimateOutEnd.bind(this);\n    var defaultActiveIndex = props.defaultActiveIndex;\n    this.state = {\n      activeIndex: defaultActiveIndex != null ? defaultActiveIndex : 0,\n      previousActiveIndex: null,\n      direction: null\n    };\n    this.isUnmounted = false;\n  }\n\n  Carousel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var activeIndex = this.getActiveIndex();\n\n    if (nextProps.activeIndex != null && nextProps.activeIndex !== activeIndex) {\n      clearTimeout(this.timeout);\n      this.setState({\n        previousActiveIndex: activeIndex,\n        direction: nextProps.direction != null ? nextProps.direction : this.getDirection(activeIndex, nextProps.activeIndex)\n      });\n    }\n  };\n\n  Carousel.prototype.componentDidMount = function componentDidMount() {\n    this.waitForNext();\n  };\n\n  Carousel.prototype.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this.timeout);\n    this.isUnmounted = true;\n  };\n\n  Carousel.prototype.handleMouseOver = function handleMouseOver() {\n    if (this.props.pauseOnHover) {\n      this.pause();\n    }\n  };\n\n  Carousel.prototype.handleMouseOut = function handleMouseOut() {\n    if (this.isPaused) {\n      this.play();\n    }\n  };\n\n  Carousel.prototype.handlePrev = function handlePrev(e) {\n    var index = this.getActiveIndex() - 1;\n\n    if (index < 0) {\n      if (!this.props.wrap) {\n        return;\n      }\n\n      index = _utilsValidComponentChildren2['default'].count(this.props.children) - 1;\n    }\n\n    this.select(index, e, 'prev');\n  };\n\n  Carousel.prototype.handleNext = function handleNext(e) {\n    var index = this.getActiveIndex() + 1;\n\n    var count = _utilsValidComponentChildren2['default'].count(this.props.children);\n\n    if (index > count - 1) {\n      if (!this.props.wrap) {\n        return;\n      }\n\n      index = 0;\n    }\n\n    this.select(index, e, 'next');\n  };\n\n  Carousel.prototype.handleItemAnimateOutEnd = function handleItemAnimateOutEnd() {\n    var _this = this;\n\n    this.setState({\n      previousActiveIndex: null,\n      direction: null\n    }, function () {\n      _this.waitForNext();\n\n      if (_this.props.onSlideEnd) {\n        _this.props.onSlideEnd();\n      }\n    });\n  };\n\n  Carousel.prototype.getActiveIndex = function getActiveIndex() {\n    var activeIndexProp = this.props.activeIndex;\n    return activeIndexProp != null ? activeIndexProp : this.state.activeIndex;\n  };\n\n  Carousel.prototype.getDirection = function getDirection(prevIndex, index) {\n    if (prevIndex === index) {\n      return null;\n    }\n\n    return prevIndex > index ? 'prev' : 'next';\n  };\n\n  Carousel.prototype.select = function select(index, e, direction) {\n    clearTimeout(this.timeout); // TODO: Is this necessary? Seems like the only risk is if the component\n    // unmounts while handleItemAnimateOutEnd fires.\n\n    if (this.isUnmounted) {\n      return;\n    }\n\n    var previousActiveIndex = this.getActiveIndex();\n    direction = direction || this.getDirection(previousActiveIndex, index);\n    var onSelect = this.props.onSelect;\n\n    if (onSelect) {\n      if (onSelect.length > 1) {\n        // React SyntheticEvents are pooled, so we need to remove this event\n        // from the pool to add a custom property. To avoid unnecessarily\n        // removing objects from the pool, only do this when the listener\n        // actually wants the event.\n        if (e) {\n          e.persist();\n          e.direction = direction;\n        } else {\n          e = {\n            direction: direction\n          };\n        }\n\n        onSelect(index, e);\n      } else {\n        onSelect(index);\n      }\n    }\n\n    if (this.props.activeIndex == null && index !== previousActiveIndex) {\n      if (this.state.previousActiveIndex != null) {\n        // If currently animating don't activate the new index.\n        // TODO: look into queueing this canceled call and\n        // animating after the current animation has ended.\n        return;\n      }\n\n      this.setState({\n        activeIndex: index,\n        previousActiveIndex: previousActiveIndex,\n        direction: direction\n      });\n    }\n  };\n\n  Carousel.prototype.waitForNext = function waitForNext() {\n    var _props = this.props;\n    var slide = _props.slide;\n    var interval = _props.interval;\n    var activeIndexProp = _props.activeIndex;\n\n    if (!this.isPaused && slide && interval && activeIndexProp == null) {\n      this.timeout = setTimeout(this.handleNext, interval);\n    }\n  }; // This might be a public API.\n\n\n  Carousel.prototype.pause = function pause() {\n    this.isPaused = true;\n    clearTimeout(this.timeout);\n  }; // This might be a public API.\n\n\n  Carousel.prototype.play = function play() {\n    this.isPaused = false;\n    this.waitForNext();\n  };\n\n  Carousel.prototype.renderIndicators = function renderIndicators(children, activeIndex, bsProps) {\n    var _this2 = this;\n\n    var indicators = [];\n\n    _utilsValidComponentChildren2['default'].forEach(children, function (child, index) {\n      indicators.push(_react2['default'].createElement('li', {\n        key: index,\n        className: index === activeIndex ? 'active' : null,\n        onClick: function onClick(e) {\n          return _this2.select(index, e);\n        }\n      }), // Force whitespace between indicator elements. Bootstrap requires\n      // this for correct spacing of elements.\n      ' ');\n    });\n\n    return _react2['default'].createElement('ol', {\n      className: _utilsBootstrapUtils.prefix(bsProps, 'indicators')\n    }, indicators);\n  };\n\n  Carousel.prototype.renderControls = function renderControls(wrap, children, activeIndex, prevIcon, nextIcon, bsProps) {\n    var controlClassName = _utilsBootstrapUtils.prefix(bsProps, 'control');\n\n    var count = _utilsValidComponentChildren2['default'].count(children);\n\n    return [(wrap || activeIndex !== 0) && _react2['default'].createElement(_SafeAnchor2['default'], {\n      key: 'prev',\n      className: _classnames2['default'](controlClassName, 'left'),\n      onClick: this.handlePrev\n    }, prevIcon), (wrap || activeIndex !== count - 1) && _react2['default'].createElement(_SafeAnchor2['default'], {\n      key: 'next',\n      className: _classnames2['default'](controlClassName, 'right'),\n      onClick: this.handleNext\n    }, nextIcon)];\n  };\n\n  Carousel.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props2 = this.props;\n    var slide = _props2.slide;\n    var indicators = _props2.indicators;\n    var controls = _props2.controls;\n    var wrap = _props2.wrap;\n    var prevIcon = _props2.prevIcon;\n    var nextIcon = _props2.nextIcon;\n    var className = _props2.className;\n    var children = _props2.children;\n\n    var props = _objectWithoutProperties(_props2, ['slide', 'indicators', 'controls', 'wrap', 'prevIcon', 'nextIcon', 'className', 'children']);\n\n    var _state = this.state;\n    var previousActiveIndex = _state.previousActiveIndex;\n    var direction = _state.direction;\n\n    var _splitBsPropsAndOmit = _utilsBootstrapUtils.splitBsPropsAndOmit(props, ['interval', 'pauseOnHover', 'onSelect', 'onSlideEnd', 'activeIndex', // Accessed via this.getActiveIndex().\n    'defaultActiveIndex', 'direction']);\n\n    var bsProps = _splitBsPropsAndOmit[0];\n    var elementProps = _splitBsPropsAndOmit[1];\n    var activeIndex = this.getActiveIndex();\n\n    var classes = _extends({}, _utilsBootstrapUtils.getClassSet(bsProps), {\n      slide: slide\n    });\n\n    return _react2['default'].createElement('div', _extends({}, elementProps, {\n      className: _classnames2['default'](className, classes),\n      onMouseOver: this.handleMouseOver,\n      onMouseOut: this.handleMouseOut\n    }), indicators && this.renderIndicators(children, activeIndex, bsProps), _react2['default'].createElement('div', {\n      className: _utilsBootstrapUtils.prefix(bsProps, 'inner')\n    }, _utilsValidComponentChildren2['default'].map(children, function (child, index) {\n      var active = index === activeIndex;\n      var previousActive = slide && index === previousActiveIndex;\n      return _react.cloneElement(child, {\n        active: active,\n        index: index,\n        animateOut: previousActive,\n        animateIn: active && previousActiveIndex != null && slide,\n        direction: direction,\n        onAnimateOutEnd: previousActive ? _this3.handleItemAnimateOutEnd : null\n      });\n    })), controls && this.renderControls(wrap, children, activeIndex, prevIcon, nextIcon, bsProps));\n  };\n\n  return Carousel;\n}(_react2['default'].Component);\n\nCarousel.propTypes = propTypes;\nCarousel.defaultProps = defaultProps;\nCarousel.Caption = _CarouselCaption2['default'];\nCarousel.Item = _CarouselItem2['default'];\nexports['default'] = _utilsBootstrapUtils.bsClass('carousel', Carousel);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}