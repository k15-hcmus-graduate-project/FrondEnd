{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n * @alias Parse.User\n * @extends Parse.Object\n */\n\nvar ParseUser =\n/*#__PURE__*/\nfunction (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n  /**\n   * @param {Object} attributes The initial set of data to store in the user.\n   */\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseUser).call(this, '_User'));\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error('Can\\'t create an invalid Parse User');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n    * @param {Object} options\n   * @return {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function value(options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Unlike in the Android/iOS SDKs, logInWith is unnecessary, since you can\n     * call linkWith on the user (even if it doesn't exist yet on the server).\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function value(provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise*/\n    {\n      var _this2 = this;\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[provider];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new Promise(function (resolve, reject) {\n          provider.authenticate({\n            success: function success(provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2._linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function error(provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function value(provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n      */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function value() {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for\n     * unlinking)\n      */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function value() {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function value(provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      var _this3 = this;\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      return this._linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return Promise.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n      */\n\n  }, {\n    key: \"_isLinked\",\n    value: function value(provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n      */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function value() {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n      */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function value(provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function value()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n      * @return {Boolean}\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function value()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns get(\"username\").\n      * @return {String}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function value()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n      * @param {String} username\n     * @param {Object} options\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function value(username\n    /*: string*/\n    ) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n      * @param {String} password\n     * @param {Object} options\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function value(password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n      * @return {String}\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function value()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n      * @param {String} email\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function value(email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n      * @return {String} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function value()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n      * @return (Boolean) whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function value()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {Object} attrs Extra fields to set on the new user, or null.\n     * @param {Object} options\n     * @return {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function value(attrs\n    /*: AttributeMap*/\n    , options\n    /*: FullOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {Object} options\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function value(options\n    /*: FullOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var loginOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"save\",\n    value: function value()\n    /*: Promise*/\n    {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args).then(function () {\n        if (_this4.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this4);\n        }\n\n        return _this4;\n      });\n    }\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function value()\n    /*: Promise*/\n    {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args).then(function () {\n        if (_this5.isCurrent()) {\n          return _CoreManager.default.getUserController().removeUserFromDisk();\n        }\n\n        return _this5;\n      });\n    }\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function value()\n    /*: Promise*/\n    {\n      var _this6 = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args).then(function () {\n        if (_this6.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this6);\n        }\n\n        return _this6;\n      });\n    }\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function value()\n    /*: Promise*/\n    {\n      var _this7 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args).then(function () {\n        if (_this7.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this7);\n        }\n\n        return _this7;\n      });\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function value() {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class\n      * @param {Object} protoProps A set of properties to add to the prototype\n     * @param {Object} classProps A set of static properties to add to the class\n     * @static\n     * @return {Class} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function value(protoProps\n    /*: {[prop: string]: any}*/\n    , classProps\n    /*: {[prop: string]: any}*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            Object.defineProperty(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            Object.defineProperty(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n      * @static\n     * @return {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function value()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n      * @static\n     * @return {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function value()\n    /*: Promise*/\n    {\n      if (!canUseCurrentUser) {\n        return Promise.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} username The username (or email) to sign up with.\n     * @param {String} password The password to sign up with.\n     * @param {Object} attrs Extra fields to set on the new user.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function value(username, password, attrs, options) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} username The username (or email) to log in with.\n     * @param {String} password The password to log in with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function value(username, password, options) {\n      if (typeof username !== 'string') {\n        return Promise.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return Promise.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} sessionToken The sessionToken to log in with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function value(sessionToken, options) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.become(becomeOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {Object} userJSON The JSON map of the User's data\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function value(userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.hydrate(userJSON);\n    }\n  }, {\n    key: \"logInWith\",\n    value: function value(provider, options) {\n      return ParseUser._logInWith(provider, options);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n      * @static\n     * @return {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function value() {\n      if (!canUseCurrentUser) {\n        throw new Error('There is no current user on a node.js server environment.');\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut();\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} email The email address associated with the user that\n     *     forgot their password.\n     * @param {Object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function value(email, options) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n      * @param {Boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function value(isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n      * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function value(options) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return Promise.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n      * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function value() {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n      * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function value() {\n      canUseCurrentUser = false;\n    }\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function value(provider) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n  }, {\n    key: \"_logInWith\",\n    value: function value(provider, options) {\n      var user = new ParseUser();\n      return user._linkWith(provider, options);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function value() {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function value(user) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function updateUserOnDisk(user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    json.className = '_User';\n    return _Storage.default.setItemAsync(path, JSON.stringify(json)).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function removeUserFromDisk() {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function setCurrentUser(user) {\n    var currentUser = this.currentUser();\n    var promise = Promise.resolve();\n\n    if (currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser)) {\n      promise = currentUser.destroy({\n        sessionToken: currentUser.getSessionToken()\n      });\n    }\n\n    currentUserCache = user;\n\n    user._cleanupAuthData();\n\n    user._synchronizeAllAuthData();\n\n    return promise.then(function () {\n      return DefaultController.updateUserOnDisk(user);\n    });\n  },\n  currentUser: function currentUser()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function currentUserAsync()\n  /*: Promise*/\n  {\n    if (currentUserCache) {\n      return Promise.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return Promise.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return Promise.resolve(null);\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return Promise.resolve(current);\n    });\n  },\n  signUp: function signUp(user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return Promise.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty name.'));\n    }\n\n    if (!password || !password.length) {\n      return Promise.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function logIn(user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request('GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return Promise.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function become(options\n  /*: RequestOptions*/\n  )\n  /*: Promise*/\n  {\n    var user = new ParseUser();\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function hydrate(userJSON\n  /*: AttributeMap*/\n  ) {\n    var user = new ParseUser();\n\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return Promise.resolve(user);\n    }\n  },\n  logOut: function logOut()\n  /*: Promise*/\n  {\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      var RESTController = _CoreManager.default.getRESTController();\n\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function requestPasswordReset(email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function upgradeToRevocableSession(user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var token = user.getSessionToken();\n\n    if (!token) {\n      return Promise.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token'));\n    }\n\n    options.sessionToken = token;\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'upgradeToRevocableSession', {}, options).then(function (result) {\n      var session = new _ParseSession.default();\n\n      session._finishFetch(result);\n\n      user._finishFetch({\n        sessionToken: session.getSessionToken()\n      });\n\n      if (user.isCurrent()) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return Promise.resolve(user);\n    });\n  },\n  linkWith: function linkWith(user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}