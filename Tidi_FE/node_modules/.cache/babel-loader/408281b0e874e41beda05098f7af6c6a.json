{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactPropTypesLibElementType = require('react-prop-types/lib/elementType');\n\nvar _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsCreateChainedFunction = require('./utils/createChainedFunction');\n\nvar _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);\n\nvar _Fade = require('./Fade');\n\nvar _Fade2 = _interopRequireDefault(_Fade);\n\nvar propTypes = {\n  /**\n   * Uniquely identify the `<TabPane>` among its siblings.\n   */\n  eventKey: _react.PropTypes.any,\n\n  /**\n   * Use animation when showing or hiding `<TabPane>`s. Use `false` to disable,\n   * `true` to enable the default `<Fade>` animation or any `<Transition>`\n   * component.\n   */\n  animation: _react.PropTypes.oneOfType([_react.PropTypes.bool, _reactPropTypesLibElementType2['default']]),\n\n  /** @private **/\n  id: _react.PropTypes.string,\n\n  /** @private **/\n  'aria-labelledby': _react.PropTypes.string,\n\n  /**\n   * If not explicitly specified and rendered in the context of a\n   * `<TabContent>`, the `bsClass` of the `<TabContent>` suffixed by `-pane`.\n   * If otherwise not explicitly specified, `tab-pane`.\n   */\n  bsClass: _react2['default'].PropTypes.string,\n\n  /**\n   * Transition onEnter callback when animation is not `false`\n   */\n  onEnter: _react.PropTypes.func,\n\n  /**\n   * Transition onEntering callback when animation is not `false`\n   */\n  onEntering: _react.PropTypes.func,\n\n  /**\n   * Transition onEntered callback when animation is not `false`\n   */\n  onEntered: _react.PropTypes.func,\n\n  /**\n   * Transition onExit callback when animation is not `false`\n   */\n  onExit: _react.PropTypes.func,\n\n  /**\n   * Transition onExiting callback when animation is not `false`\n   */\n  onExiting: _react.PropTypes.func,\n\n  /**\n   * Transition onExited callback when animation is not `false`\n   */\n  onExited: _react.PropTypes.func,\n\n  /**\n   * Unmount the tab (remove it from the DOM) when it is no longer visible\n   */\n  unmountOnExit: _react.PropTypes.bool\n};\nvar contextTypes = {\n  $bs_tabContainer: _react.PropTypes.shape({\n    getId: _react.PropTypes.func,\n    unmountOnExit: _react.PropTypes.bool\n  }),\n  $bs_tabContent: _react.PropTypes.shape({\n    bsClass: _react.PropTypes.string,\n    animation: _react.PropTypes.oneOfType([_react.PropTypes.bool, _reactPropTypesLibElementType2['default']]),\n    activeKey: _react.PropTypes.any,\n    unmountOnExit: _react.PropTypes.bool,\n    onPaneEnter: _react.PropTypes.func.isRequired,\n    onPaneExited: _react.PropTypes.func.isRequired,\n    exiting: _react.PropTypes.bool.isRequired\n  })\n};\n/**\n * We override the `<TabContainer>` context so `<Nav>`s in `<TabPane>`s don't\n * conflict with the top level one.\n */\n\nvar childContextTypes = {\n  $bs_tabContainer: _react.PropTypes.oneOf([null])\n};\n\nvar TabPane = function (_React$Component) {\n  _inherits(TabPane, _React$Component);\n\n  function TabPane(props, context) {\n    _classCallCheck(this, TabPane);\n\n    _React$Component.call(this, props, context);\n\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleExited = this.handleExited.bind(this);\n    this['in'] = false;\n  }\n\n  TabPane.prototype.getChildContext = function getChildContext() {\n    return {\n      $bs_tabContainer: null\n    };\n  };\n\n  TabPane.prototype.componentDidMount = function componentDidMount() {\n    if (this.shouldBeIn()) {\n      // In lieu of the action event firing.\n      this.handleEnter();\n    }\n  };\n\n  TabPane.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this['in']) {\n      if (!this.shouldBeIn()) {\n        // We shouldn't be active any more. Notify the parent.\n        this.handleExited();\n      }\n    } else if (this.shouldBeIn()) {\n      // We are the active child. Notify the parent.\n      this.handleEnter();\n    }\n  };\n\n  TabPane.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this['in']) {\n      // In lieu of the action event firing.\n      this.handleExited();\n    }\n  };\n\n  TabPane.prototype.handleEnter = function handleEnter() {\n    var tabContent = this.context.$bs_tabContent;\n\n    if (!tabContent) {\n      return;\n    }\n\n    this['in'] = tabContent.onPaneEnter(this, this.props.eventKey);\n  };\n\n  TabPane.prototype.handleExited = function handleExited() {\n    var tabContent = this.context.$bs_tabContent;\n\n    if (!tabContent) {\n      return;\n    }\n\n    tabContent.onPaneExited(this);\n    this['in'] = false;\n  };\n\n  TabPane.prototype.getAnimation = function getAnimation() {\n    if (this.props.animation != null) {\n      return this.props.animation;\n    }\n\n    var tabContent = this.context.$bs_tabContent;\n    return tabContent && tabContent.animation;\n  };\n\n  TabPane.prototype.isActive = function isActive() {\n    var tabContent = this.context.$bs_tabContent;\n    var activeKey = tabContent && tabContent.activeKey;\n    return this.props.eventKey === activeKey;\n  };\n\n  TabPane.prototype.shouldBeIn = function shouldBeIn() {\n    return this.getAnimation() && this.isActive();\n  };\n\n  TabPane.prototype.render = function render() {\n    var _props = this.props;\n    var eventKey = _props.eventKey;\n    var className = _props.className;\n    var onEnter = _props.onEnter;\n    var onEntering = _props.onEntering;\n    var onEntered = _props.onEntered;\n    var onExit = _props.onExit;\n    var onExiting = _props.onExiting;\n    var onExited = _props.onExited;\n    var propsUnmountOnExit = _props.unmountOnExit;\n\n    var props = _objectWithoutProperties(_props, ['eventKey', 'className', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited', 'unmountOnExit']);\n\n    var _context = this.context;\n    var tabContent = _context.$bs_tabContent;\n    var tabContainer = _context.$bs_tabContainer;\n\n    var _splitBsPropsAndOmit = _utilsBootstrapUtils.splitBsPropsAndOmit(props, ['animation']);\n\n    var bsProps = _splitBsPropsAndOmit[0];\n    var elementProps = _splitBsPropsAndOmit[1];\n    var active = this.isActive();\n    var animation = this.getAnimation();\n    var unmountOnExit = propsUnmountOnExit != null ? propsUnmountOnExit : tabContent && tabContent.unmountOnExit;\n\n    if (!active && !animation && unmountOnExit) {\n      return null;\n    }\n\n    var Transition = animation === true ? _Fade2['default'] : animation || null;\n\n    if (tabContent) {\n      bsProps.bsClass = _utilsBootstrapUtils.prefix(tabContent, 'pane');\n    }\n\n    var classes = _extends({}, _utilsBootstrapUtils.getClassSet(bsProps), {\n      active: active\n    });\n\n    if (tabContainer) {\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](!elementProps.id && !elementProps['aria-labelledby'], 'In the context of a `<TabContainer>`, `<TabPanes>` are given ' + 'generated `id` and `aria-labelledby` attributes for the sake of ' + 'proper component accessibility. Any provided ones will be ignored. ' + 'To control these attributes directly provide a `generateChildId` ' + 'prop to the parent `<TabContainer>`.') : undefined;\n      elementProps.id = tabContainer.getPaneId(eventKey);\n      elementProps['aria-labelledby'] = tabContainer.getTabId(eventKey);\n    }\n\n    var pane = _react2['default'].createElement('div', _extends({}, elementProps, {\n      role: 'tabpanel',\n      'aria-hidden': !active,\n      className: _classnames2['default'](className, classes)\n    }));\n\n    if (Transition) {\n      var exiting = tabContent && tabContent.exiting;\n      return _react2['default'].createElement(Transition, {\n        'in': active && !exiting,\n        onEnter: _utilsCreateChainedFunction2['default'](this.handleEnter, onEnter),\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: _utilsCreateChainedFunction2['default'](this.handleExited, onExited),\n        unmountOnExit: unmountOnExit\n      }, pane);\n    }\n\n    return pane;\n  };\n\n  return TabPane;\n}(_react2['default'].Component);\n\nTabPane.propTypes = propTypes;\nTabPane.contextTypes = contextTypes;\nTabPane.childContextTypes = childContextTypes;\nexports['default'] = _utilsBootstrapUtils.bsClass('tab-pane', TabPane);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}