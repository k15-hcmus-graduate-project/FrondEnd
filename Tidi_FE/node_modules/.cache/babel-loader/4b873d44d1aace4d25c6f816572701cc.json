{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParsePolygon = _interopRequireDefault(require(\"./ParsePolygon\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar toString = Object.prototype.toString;\n\nfunction encode(value\n/*: mixed*/\n, disallowObjects\n/*: boolean*/\n, forcePointers\n/*: boolean*/\n, seen\n/*: Array<mixed>*/\n)\n/*: any*/\n{\n  if (value instanceof _ParseObject.default) {\n    if (disallowObjects) {\n      throw new Error('Parse Objects not allowed here');\n    }\n\n    var seenEntry = value.id ? value.className + ':' + value.id : value;\n\n    if (forcePointers || !seen || seen.indexOf(seenEntry) > -1 || value.dirty() || Object.keys(value._getServerData()).length < 1) {\n      return value.toPointer();\n    }\n\n    seen = seen.concat(seenEntry);\n    return value._toFullJSON(seen);\n  }\n\n  if (value instanceof _ParseOp.Op || value instanceof _ParseACL.default || value instanceof _ParseGeoPoint.default || value instanceof _ParsePolygon.default || value instanceof _ParseRelation.default) {\n    return value.toJSON();\n  }\n\n  if (value instanceof _ParseFile.default) {\n    if (!value.url()) {\n      throw new Error('Tried to encode an unsaved file.');\n    }\n\n    return value.toJSON();\n  }\n\n  if (toString.call(value) === '[object Date]') {\n    if (isNaN(value)) {\n      throw new Error('Tried to encode an invalid date.');\n    }\n\n    return {\n      __type: 'Date',\n      iso: value\n      /*: any*/\n      .toJSON()\n    };\n  }\n\n  if (toString.call(value) === '[object RegExp]' && typeof value.source === 'string') {\n    return value.source;\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(function (v) {\n      return encode(v, disallowObjects, forcePointers, seen);\n    });\n  }\n\n  if (value && (0, _typeof2.default)(value) === 'object') {\n    var output = {};\n\n    for (var k in value) {\n      output[k] = encode(value[k], disallowObjects, forcePointers, seen);\n    }\n\n    return output;\n  }\n\n  return value;\n}\n\nfunction _default(value\n/*: mixed*/\n, disallowObjects\n/*:: ?: boolean*/\n, forcePointers\n/*:: ?: boolean*/\n, seen\n/*:: ?: Array<mixed>*/\n)\n/*: any*/\n{\n  return encode(value, !!disallowObjects, !!forcePointers, seen || []);\n}","map":null,"metadata":{},"sourceType":"script"}