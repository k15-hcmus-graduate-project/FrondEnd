{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar propTypes = {\n  inline: _react2['default'].PropTypes.bool,\n  disabled: _react2['default'].PropTypes.bool,\n\n  /**\n   * Only valid if `inline` is not set.\n   */\n  validationState: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),\n\n  /**\n   * Attaches a ref to the `<input>` element. Only functions can be used here.\n   *\n   * ```js\n   * <Checkbox inputRef={ref => { this.input = ref; }} />\n   * ```\n   */\n  inputRef: _react2['default'].PropTypes.func\n};\nvar defaultProps = {\n  inline: false,\n  disabled: false\n};\n\nvar Checkbox = function (_React$Component) {\n  _inherits(Checkbox, _React$Component);\n\n  function Checkbox() {\n    _classCallCheck(this, Checkbox);\n\n    _React$Component.apply(this, arguments);\n  }\n\n  Checkbox.prototype.render = function render() {\n    var _props = this.props;\n    var inline = _props.inline;\n    var disabled = _props.disabled;\n    var validationState = _props.validationState;\n    var inputRef = _props.inputRef;\n    var className = _props.className;\n    var style = _props.style;\n    var children = _props.children;\n\n    var props = _objectWithoutProperties(_props, ['inline', 'disabled', 'validationState', 'inputRef', 'className', 'style', 'children']);\n\n    var _splitBsProps = _utilsBootstrapUtils.splitBsProps(props);\n\n    var bsProps = _splitBsProps[0];\n    var elementProps = _splitBsProps[1];\n\n    var input = _react2['default'].createElement('input', _extends({}, elementProps, {\n      ref: inputRef,\n      type: 'checkbox',\n      disabled: disabled\n    }));\n\n    if (inline) {\n      var _classes;\n\n      var _classes2 = (_classes = {}, _classes[_utilsBootstrapUtils.prefix(bsProps, 'inline')] = true, _classes.disabled = disabled, _classes); // Use a warning here instead of in propTypes to get better-looking\n      // generated documentation.\n\n\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](!validationState, '`validationState` is ignored on `<Checkbox inline>`. To display ' + 'validation state on an inline checkbox, set `validationState` on a ' + 'parent `<FormGroup>` or other element instead.') : undefined;\n      return _react2['default'].createElement('label', {\n        className: _classnames2['default'](className, _classes2),\n        style: style\n      }, input, children);\n    }\n\n    var classes = _extends({}, _utilsBootstrapUtils.getClassSet(bsProps), {\n      disabled: disabled\n    });\n\n    if (validationState) {\n      classes['has-' + validationState] = true;\n    }\n\n    return _react2['default'].createElement('div', {\n      className: _classnames2['default'](className, classes),\n      style: style\n    }, _react2['default'].createElement('label', null, input, children));\n  };\n\n  return Checkbox;\n}(_react2['default'].Component);\n\nCheckbox.propTypes = propTypes;\nCheckbox.defaultProps = defaultProps;\nexports['default'] = _utilsBootstrapUtils.bsClass('checkbox', Checkbox);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}