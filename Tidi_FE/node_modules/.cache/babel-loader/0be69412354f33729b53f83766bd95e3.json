{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFunctions = getFunctions;\nexports.getTriggers = getTriggers;\nexports.getFunction = getFunction;\nexports.getTrigger = getTrigger;\nexports.createFunction = createFunction;\nexports.createTrigger = createTrigger;\nexports.create = create;\nexports.updateFunction = updateFunction;\nexports.updateTrigger = updateTrigger;\nexports.update = update;\nexports.removeFunction = removeFunction;\nexports.removeTrigger = removeTrigger;\nexports.remove = remove;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getFunctions() {\n  return _CoreManager.default.getHooksController().get(\"functions\");\n}\n\nfunction getTriggers() {\n  return _CoreManager.default.getHooksController().get(\"triggers\");\n}\n\nfunction getFunction(name) {\n  return _CoreManager.default.getHooksController().get(\"functions\", name);\n}\n\nfunction getTrigger(className, triggerName) {\n  return _CoreManager.default.getHooksController().get(\"triggers\", className, triggerName);\n}\n\nfunction createFunction(functionName, url) {\n  return create({\n    functionName: functionName,\n    url: url\n  });\n}\n\nfunction createTrigger(className, triggerName, url) {\n  return create({\n    className: className,\n    triggerName: triggerName,\n    url: url\n  });\n}\n\nfunction create(hook) {\n  return _CoreManager.default.getHooksController().create(hook);\n}\n\nfunction updateFunction(functionName, url) {\n  return update({\n    functionName: functionName,\n    url: url\n  });\n}\n\nfunction updateTrigger(className, triggerName, url) {\n  return update({\n    className: className,\n    triggerName: triggerName,\n    url: url\n  });\n}\n\nfunction update(hook) {\n  return _CoreManager.default.getHooksController().update(hook);\n}\n\nfunction removeFunction(functionName) {\n  return remove({\n    functionName: functionName\n  });\n}\n\nfunction removeTrigger(className, triggerName) {\n  return remove({\n    className: className,\n    triggerName: triggerName\n  });\n}\n\nfunction remove(hook) {\n  return _CoreManager.default.getHooksController().remove(hook);\n}\n\nvar DefaultController = {\n  get: function get(type, functionName, triggerName) {\n    var url = \"/hooks/\" + type;\n\n    if (functionName) {\n      url += \"/\" + functionName;\n\n      if (triggerName) {\n        url += \"/\" + triggerName;\n      }\n    }\n\n    return this.sendRequest(\"GET\", url);\n  },\n  create: function create(hook) {\n    var url;\n\n    if (hook.functionName && hook.url) {\n      url = \"/hooks/functions\";\n    } else if (hook.className && hook.triggerName && hook.url) {\n      url = \"/hooks/triggers\";\n    } else {\n      return Promise.reject({\n        error: 'invalid hook declaration',\n        code: 143\n      });\n    }\n\n    return this.sendRequest(\"POST\", url, hook);\n  },\n  remove: function remove(hook) {\n    var url;\n\n    if (hook.functionName) {\n      url = \"/hooks/functions/\" + hook.functionName;\n      delete hook.functionName;\n    } else if (hook.className && hook.triggerName) {\n      url = \"/hooks/triggers/\" + hook.className + \"/\" + hook.triggerName;\n      delete hook.className;\n      delete hook.triggerName;\n    } else {\n      return Promise.reject({\n        error: 'invalid hook declaration',\n        code: 143\n      });\n    }\n\n    return this.sendRequest(\"PUT\", url, {\n      \"__op\": \"Delete\"\n    });\n  },\n  update: function update(hook) {\n    var url;\n\n    if (hook.functionName && hook.url) {\n      url = \"/hooks/functions/\" + hook.functionName;\n      delete hook.functionName;\n    } else if (hook.className && hook.triggerName && hook.url) {\n      url = \"/hooks/triggers/\" + hook.className + \"/\" + hook.triggerName;\n      delete hook.className;\n      delete hook.triggerName;\n    } else {\n      return Promise.reject({\n        error: 'invalid hook declaration',\n        code: 143\n      });\n    }\n\n    return this.sendRequest('PUT', url, hook);\n  },\n  sendRequest: function sendRequest(method, url, body) {\n    return _CoreManager.default.getRESTController().request(method, url, body, {\n      useMasterKey: true\n    }).then(function (res) {\n      var decoded = (0, _decode.default)(res);\n\n      if (decoded) {\n        return Promise.resolve(decoded);\n      }\n\n      return Promise.reject(new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.'));\n    });\n  }\n};\n\n_CoreManager.default.setHooksController(DefaultController);","map":null,"metadata":{},"sourceType":"script"}