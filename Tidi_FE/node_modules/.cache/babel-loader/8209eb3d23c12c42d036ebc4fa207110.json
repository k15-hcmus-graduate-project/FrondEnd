{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _Object$values = require('babel-runtime/core-js/object/values')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsStyleConfig = require('./utils/StyleConfig');\n\nvar _utilsValidComponentChildren = require('./utils/ValidComponentChildren');\n\nvar _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);\n\nvar ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  var children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  var error = null;\n\n  _react2['default'].Children.forEach(children, function (child) {\n    if (error) {\n      return;\n    }\n\n    if (child.type === ProgressBar) {\n      // eslint-disable-line no-use-before-define\n      return;\n    }\n\n    var childIdentifier = _react2['default'].isValidElement(child) ? child.type.displayName || child.type.name || child.type : child;\n    error = new Error('Children of ' + componentName + ' can contain only ProgressBar ' + ('components. Found ' + childIdentifier + '.'));\n  });\n\n  return error;\n}\n\nvar propTypes = {\n  min: _react.PropTypes.number,\n  now: _react.PropTypes.number,\n  max: _react.PropTypes.number,\n  label: _react.PropTypes.node,\n  srOnly: _react.PropTypes.bool,\n  striped: _react.PropTypes.bool,\n  active: _react.PropTypes.bool,\n  children: onlyProgressBar,\n\n  /**\n   * @private\n   */\n  isChild: _react.PropTypes.bool\n};\nvar defaultProps = {\n  min: 0,\n  max: 100,\n  active: false,\n  isChild: false,\n  srOnly: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  var percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nvar ProgressBar = function (_React$Component) {\n  _inherits(ProgressBar, _React$Component);\n\n  function ProgressBar() {\n    _classCallCheck(this, ProgressBar);\n\n    _React$Component.apply(this, arguments);\n  }\n\n  ProgressBar.prototype.renderProgressBar = function renderProgressBar(_ref) {\n    var _extends2;\n\n    var min = _ref.min;\n    var now = _ref.now;\n    var max = _ref.max;\n    var label = _ref.label;\n    var srOnly = _ref.srOnly;\n    var striped = _ref.striped;\n    var active = _ref.active;\n    var className = _ref.className;\n    var style = _ref.style;\n\n    var props = _objectWithoutProperties(_ref, ['min', 'now', 'max', 'label', 'srOnly', 'striped', 'active', 'className', 'style']);\n\n    var _splitBsProps = _utilsBootstrapUtils.splitBsProps(props);\n\n    var bsProps = _splitBsProps[0];\n    var elementProps = _splitBsProps[1];\n\n    var classes = _extends({}, _utilsBootstrapUtils.getClassSet(bsProps), (_extends2 = {\n      active: active\n    }, _extends2[_utilsBootstrapUtils.prefix(bsProps, 'striped')] = active || striped, _extends2));\n\n    return _react2['default'].createElement('div', _extends({}, elementProps, {\n      role: 'progressbar',\n      className: _classnames2['default'](className, classes),\n      style: _extends({\n        width: getPercentage(now, min, max) + '%'\n      }, style),\n      'aria-valuenow': now,\n      'aria-valuemin': min,\n      'aria-valuemax': max\n    }), srOnly ? _react2['default'].createElement('span', {\n      className: 'sr-only'\n    }, label) : label);\n  };\n\n  ProgressBar.prototype.render = function render() {\n    var _props = this.props;\n    var isChild = _props.isChild;\n\n    var props = _objectWithoutProperties(_props, ['isChild']);\n\n    if (isChild) {\n      return this.renderProgressBar(props);\n    }\n\n    var min = props.min;\n    var now = props.now;\n    var max = props.max;\n    var label = props.label;\n    var srOnly = props.srOnly;\n    var striped = props.striped;\n    var active = props.active;\n    var bsClass = props.bsClass;\n    var bsStyle = props.bsStyle;\n    var className = props.className;\n    var children = props.children;\n\n    var wrapperProps = _objectWithoutProperties(props, ['min', 'now', 'max', 'label', 'srOnly', 'striped', 'active', 'bsClass', 'bsStyle', 'className', 'children']);\n\n    return _react2['default'].createElement('div', _extends({}, wrapperProps, {\n      className: _classnames2['default'](className, 'progress')\n    }), children ? _utilsValidComponentChildren2['default'].map(children, function (child) {\n      return _react.cloneElement(child, {\n        isChild: true\n      });\n    }) : this.renderProgressBar({\n      min: min,\n      now: now,\n      max: max,\n      label: label,\n      srOnly: srOnly,\n      striped: striped,\n      active: active,\n      bsClass: bsClass,\n      bsStyle: bsStyle\n    }));\n  };\n\n  return ProgressBar;\n}(_react2['default'].Component);\n\nProgressBar.propTypes = propTypes;\nProgressBar.defaultProps = defaultProps;\nexports['default'] = _utilsBootstrapUtils.bsClass('progress-bar', _utilsBootstrapUtils.bsStyles(_Object$values(_utilsStyleConfig.State), ProgressBar));\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}