{"ast":null,"code":"'use strict';\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _domHelpersEvents = require('dom-helpers/events');\n\nvar _domHelpersEvents2 = _interopRequireDefault(_domHelpersEvents);\n\nvar _domHelpersOwnerDocument = require('dom-helpers/ownerDocument');\n\nvar _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);\n\nvar _domHelpersUtilInDOM = require('dom-helpers/util/inDOM');\n\nvar _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);\n\nvar _domHelpersUtilScrollbarSize = require('dom-helpers/util/scrollbarSize');\n\nvar _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactOverlaysLibModal = require('react-overlays/lib/Modal');\n\nvar _reactOverlaysLibModal2 = _interopRequireDefault(_reactOverlaysLibModal);\n\nvar _reactOverlaysLibUtilsIsOverflowing = require('react-overlays/lib/utils/isOverflowing');\n\nvar _reactOverlaysLibUtilsIsOverflowing2 = _interopRequireDefault(_reactOverlaysLibUtilsIsOverflowing);\n\nvar _reactPropTypesLibElementType = require('react-prop-types/lib/elementType');\n\nvar _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);\n\nvar _Fade = require('./Fade');\n\nvar _Fade2 = _interopRequireDefault(_Fade);\n\nvar _ModalBody = require('./ModalBody');\n\nvar _ModalBody2 = _interopRequireDefault(_ModalBody);\n\nvar _ModalDialog = require('./ModalDialog');\n\nvar _ModalDialog2 = _interopRequireDefault(_ModalDialog);\n\nvar _ModalFooter = require('./ModalFooter');\n\nvar _ModalFooter2 = _interopRequireDefault(_ModalFooter);\n\nvar _ModalHeader = require('./ModalHeader');\n\nvar _ModalHeader2 = _interopRequireDefault(_ModalHeader);\n\nvar _ModalTitle = require('./ModalTitle');\n\nvar _ModalTitle2 = _interopRequireDefault(_ModalTitle);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsCreateChainedFunction = require('./utils/createChainedFunction');\n\nvar _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);\n\nvar _utilsSplitComponentProps = require('./utils/splitComponentProps');\n\nvar _utilsSplitComponentProps2 = _interopRequireDefault(_utilsSplitComponentProps);\n\nvar _utilsStyleConfig = require('./utils/StyleConfig');\n\nvar propTypes = _extends({}, _reactOverlaysLibModal2['default'].propTypes, _ModalDialog2['default'].propTypes, {\n  /**\n   * Include a backdrop component. Specify 'static' for a backdrop that doesn't\n   * trigger an \"onHide\" when clicked.\n   */\n  backdrop: _react2['default'].PropTypes.oneOf(['static', true, false]),\n\n  /**\n   * Close the modal when escape key is pressed\n   */\n  keyboard: _react2['default'].PropTypes.bool,\n\n  /**\n   * Open and close the Modal with a slide and fade animation.\n   */\n  animation: _react2['default'].PropTypes.bool,\n\n  /**\n   * A Component type that provides the modal content Markup. This is a useful\n   * prop when you want to use your own styles and markup to create a custom\n   * modal component.\n   */\n  dialogComponentClass: _reactPropTypesLibElementType2['default'],\n\n  /**\n   * When `true` The modal will automatically shift focus to itself when it\n   * opens, and replace it to the last focused element when it closes.\n   * Generally this should never be set to false as it makes the Modal less\n   * accessible to assistive technologies, like screen-readers.\n   */\n  autoFocus: _react2['default'].PropTypes.bool,\n\n  /**\n   * When `true` The modal will prevent focus from leaving the Modal while\n   * open. Consider leaving the default value here, as it is necessary to make\n   * the Modal work well with assistive technologies, such as screen readers.\n   */\n  enforceFocus: _react2['default'].PropTypes.bool,\n\n  /**\n   * When `true` The modal will show itself.\n   */\n  show: _react2['default'].PropTypes.bool,\n\n  /**\n   * A callback fired when the header closeButton or non-static backdrop is\n   * clicked. Required if either are specified.\n   */\n  onHide: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired before the Modal transitions in\n   */\n  onEnter: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired as the Modal begins to transition in\n   */\n  onEntering: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired after the Modal finishes transitioning in\n   */\n  onEntered: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired right before the Modal transitions out\n   */\n  onExit: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired as the Modal begins to transition out\n   */\n  onExiting: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired after the Modal finishes transitioning out\n   */\n  onExited: _react2['default'].PropTypes.func,\n\n  /**\n   * @private\n   */\n  container: _reactOverlaysLibModal2['default'].propTypes.container\n});\n\nvar defaultProps = _extends({}, _reactOverlaysLibModal2['default'].defaultProps, {\n  animation: true,\n  dialogComponentClass: _ModalDialog2['default']\n});\n\nvar childContextTypes = {\n  $bs_modal: _react2['default'].PropTypes.shape({\n    onHide: _react2['default'].PropTypes.func\n  })\n};\n\nvar Modal = function (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  function Modal(props, context) {\n    _classCallCheck(this, Modal);\n\n    _React$Component.call(this, props, context);\n\n    this.handleEntering = this.handleEntering.bind(this);\n    this.handleExited = this.handleExited.bind(this);\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n    this.handleDialogClick = this.handleDialogClick.bind(this);\n    this.state = {\n      style: {}\n    };\n  }\n\n  Modal.prototype.getChildContext = function getChildContext() {\n    return {\n      $bs_modal: {\n        onHide: this.props.onHide\n      }\n    };\n  };\n\n  Modal.prototype.componentWillUnmount = function componentWillUnmount() {\n    // Clean up the listener if we need to.\n    this.handleExited();\n  };\n\n  Modal.prototype.handleEntering = function handleEntering() {\n    // FIXME: This should work even when animation is disabled.\n    _domHelpersEvents2['default'].on(window, 'resize', this.handleWindowResize);\n\n    this.updateStyle();\n  };\n\n  Modal.prototype.handleExited = function handleExited() {\n    // FIXME: This should work even when animation is disabled.\n    _domHelpersEvents2['default'].off(window, 'resize', this.handleWindowResize);\n  };\n\n  Modal.prototype.handleWindowResize = function handleWindowResize() {\n    this.updateStyle();\n  };\n\n  Modal.prototype.handleDialogClick = function handleDialogClick(e) {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    this.props.onHide();\n  };\n\n  Modal.prototype.updateStyle = function updateStyle() {\n    if (!_domHelpersUtilInDOM2['default']) {\n      return;\n    }\n\n    var dialogNode = this._modal.getDialogElement();\n\n    var dialogHeight = dialogNode.scrollHeight;\n\n    var document = _domHelpersOwnerDocument2['default'](dialogNode);\n\n    var bodyIsOverflowing = _reactOverlaysLibUtilsIsOverflowing2['default'](_reactDom2['default'].findDOMNode(this.props.container || document.body));\n\n    var modalIsOverflowing = dialogHeight > document.documentElement.clientHeight;\n    this.setState({\n      style: {\n        paddingRight: bodyIsOverflowing && !modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : undefined,\n        paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : undefined\n      }\n    });\n  };\n\n  Modal.prototype.render = function render() {\n    var _this = this;\n\n    var _props = this.props;\n    var backdrop = _props.backdrop;\n    var animation = _props.animation;\n    var show = _props.show;\n    var Dialog = _props.dialogComponentClass;\n    var className = _props.className;\n    var style = _props.style;\n    var children = _props.children;\n    var // Just in case this get added to BaseModal propTypes.\n    onEntering = _props.onEntering;\n    var onExited = _props.onExited;\n\n    var props = _objectWithoutProperties(_props, ['backdrop', 'animation', 'show', 'dialogComponentClass', 'className', 'style', 'children', 'onEntering', 'onExited']);\n\n    var _splitComponentProps = _utilsSplitComponentProps2['default'](props, _reactOverlaysLibModal2['default']);\n\n    var baseModalProps = _splitComponentProps[0];\n    var dialogProps = _splitComponentProps[1];\n    var inClassName = show && !animation && 'in';\n    return _react2['default'].createElement(_reactOverlaysLibModal2['default'], _extends({}, baseModalProps, {\n      ref: function ref(c) {\n        _this._modal = c;\n      },\n      show: show,\n      onEntering: _utilsCreateChainedFunction2['default'](onEntering, this.handleEntering),\n      onExited: _utilsCreateChainedFunction2['default'](onExited, this.handleExited),\n      backdrop: backdrop,\n      backdropClassName: _classnames2['default'](_utilsBootstrapUtils.prefix(props, 'backdrop'), inClassName),\n      containerClassName: _utilsBootstrapUtils.prefix(props, 'open'),\n      transition: animation ? _Fade2['default'] : undefined,\n      dialogTransitionTimeout: Modal.TRANSITION_DURATION,\n      backdropTransitionTimeout: Modal.BACKDROP_TRANSITION_DURATION\n    }), _react2['default'].createElement(Dialog, _extends({}, dialogProps, {\n      style: _extends({}, this.state.style, style),\n      className: _classnames2['default'](className, inClassName),\n      onClick: backdrop === true ? this.handleDialogClick : null\n    }), children));\n  };\n\n  return Modal;\n}(_react2['default'].Component);\n\nModal.propTypes = propTypes;\nModal.defaultProps = defaultProps;\nModal.childContextTypes = childContextTypes;\nModal.Body = _ModalBody2['default'];\nModal.Header = _ModalHeader2['default'];\nModal.Title = _ModalTitle2['default'];\nModal.Footer = _ModalFooter2['default'];\nModal.Dialog = _ModalDialog2['default'];\nModal.TRANSITION_DURATION = 300;\nModal.BACKDROP_TRANSITION_DURATION = 150;\nexports['default'] = _utilsBootstrapUtils.bsClass('modal', _utilsBootstrapUtils.bsSizes([_utilsStyleConfig.Size.LARGE, _utilsStyleConfig.Size.SMALL], Modal));\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}