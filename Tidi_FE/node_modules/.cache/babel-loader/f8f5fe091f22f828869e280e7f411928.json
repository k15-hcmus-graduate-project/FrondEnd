{"ast":null,"code":"// Internal Dependencies\n// import Types from \"../pages/common/duck/types\";\nimport ws from \"./WebService\";\nimport jwtDecode from \"jwt-decode\";\nimport TokenApi from \"./TokenApi\";\nimport { USER_TYPE } from \"./../config/constants\"; // const loginSuccess = payload => ({\n//     type: Types.UPDATE_AUTH_STATUS,\n//     payload\n// });\n\nexport default {\n  verifyToken: function verifyToken(changeLoginStatus) {\n    if (!localStorage.getItem(\"authToken\")) {\n      if (!localStorage.getItem(\"refreshToken\")) {\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"refreshToken\");\n        changeLoginStatus(false);\n        return;\n      }\n\n      TokenApi.postVerifyRefreshToken().then(function (res) {\n        localStorage.setItem(res.access_token);\n      }).catch(function (err) {\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"refreshToken\"); // dispatch(logoutAction());\n\n        throw err;\n      });\n      return;\n    }\n\n    try {\n      TokenApi.postVerifyToken().then(function (resp) {\n        changeLoginStatus(true);\n      }).catch(function (error) {\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"refreshToken\");\n        changeLoginStatus(false);\n        throw error;\n      });\n    } catch (e) {\n      localStorage.removeItem(\"authToken\");\n      changeLoginStatus(false);\n      throw e;\n    }\n  },\n  verifyTokenAdmin: function verifyTokenAdmin() {\n    if (!localStorage.getItem(\"authToken\")) {\n      if (!localStorage.getItem(\"refreshToken\")) {\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"refreshToken\");\n        return false;\n      }\n\n      TokenApi.postVerifyRefreshToken().then(function (res) {\n        var permission = jwtDecode(res.access_token).user.permission;\n        localStorage.setItem(res.access_token);\n        console.log(jwtDecode(res.access_token));\n        if (permission === USER_TYPE.ADMIN) return true;\n        return true;\n      }).catch(function (err) {\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"refreshToken\");\n        return false; // dispatch(logoutAction());\n      });\n      return true;\n    }\n\n    try {\n      TokenApi.postVerifyToken().then(function (resp) {\n        if (resp.permission === USER_TYPE.ADMIN) return true;\n        return false;\n      }).catch(function (error) {\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"refreshToken\");\n        return false;\n      });\n      return true;\n    } catch (e) {\n      localStorage.removeItem(\"authToken\");\n      return false;\n    } // return true;\n\n  },\n  login: function login(username, password) {\n    return new Promise(function (resolve, reject) {\n      ws.login(username, password).then(function (res) {\n        var auth = JSON.parse(res);\n\n        if (auth.auth === true && auth.authToken && auth.refreshToken) {\n          localStorage.setItem(\"authToken\", auth.authToken);\n          localStorage.setItem(\"refreshToken\", auth.refreshToken); // localStorage.setItem(\"role\", auth.permission);\n\n          resolve(true);\n        }\n\n        resolve(false);\n      }).catch(function (err) {\n        console.log(\"ERR AuthSerivce: \" + err);\n      });\n    });\n  },\n  logout: function logout() {\n    localStorage.removeItem(\"authToken\");\n    localStorage.removeItem(\"refreshToken\");\n  },\n  isLoggedIn: function isLoggedIn() {\n    var authToken = localStorage.getItem(\"authToken\");\n    return new Promise(function (resolve, reject) {\n      if (!authToken) {\n        resolve({\n          tokenIsValid: false\n        });\n      } else {\n        var _jwtDecode = jwtDecode(authToken),\n            user = _jwtDecode.user;\n\n        if (!user) {\n          resolve({\n            tokenIsValid: false\n          });\n        } else {\n          resolve({\n            tokenIsValid: true,\n            username: user.username,\n            permission: user.permission,\n            emailIsVerified: true\n          });\n        }\n      }\n    });\n  },\n  saveToken: function saveToken(token) {\n    console.log(token);\n    localStorage.setItem(\"authToken\", token);\n  },\n  saveRefreshToken: function saveRefreshToken(token) {\n    console.log(token);\n    localStorage.setItem(\"refreshToken\", token);\n  },\n  getToken: function getToken() {\n    var authToken = localStorage.getItem(\"authToken\");\n    return new Promise(function (resolve, reject) {\n      ws.readAccountInfo(authToken).then(function (res) {\n        var resObj = JSON.parse(res);\n\n        if (resObj.status.status === \"TRUE\") {\n          resolve(authToken);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n  getTokenUnsafe: function getTokenUnsafe() {\n    return localStorage.getItem(\"authToken\");\n  }\n};","map":{"version":3,"sources":["/Users/lap12548/Documents/hcmus/TOTNGHIEP/GITHUB/FrondEnd/Tidi_FE/src/services/AuthService.js"],"names":["ws","jwtDecode","TokenApi","USER_TYPE","verifyToken","changeLoginStatus","localStorage","getItem","removeItem","postVerifyRefreshToken","then","res","setItem","access_token","catch","err","postVerifyToken","resp","error","e","verifyTokenAdmin","permission","user","console","log","ADMIN","login","username","password","Promise","resolve","reject","auth","JSON","parse","authToken","refreshToken","logout","isLoggedIn","tokenIsValid","emailIsVerified","saveToken","token","saveRefreshToken","getToken","readAccountInfo","resObj","status","getTokenUnsafe"],"mappings":"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","sourcesContent":["// Internal Dependencies\n// import Types from \"../pages/common/duck/types\";\nimport ws from \"./WebService\";\nimport jwtDecode from \"jwt-decode\";\nimport TokenApi from \"./TokenApi\";\nimport { USER_TYPE } from \"./../config/constants\";\n// const loginSuccess = payload => ({\n//     type: Types.UPDATE_AUTH_STATUS,\n//     payload\n// });\nexport default {\n    verifyToken: changeLoginStatus => {\n        if (!localStorage.getItem(\"authToken\")) {\n            if (!localStorage.getItem(\"refreshToken\")) {\n                localStorage.removeItem(\"authToken\");\n                localStorage.removeItem(\"refreshToken\");\n                changeLoginStatus(false);\n                return;\n            }\n            TokenApi.postVerifyRefreshToken()\n                .then(res => {\n                    localStorage.setItem(res.access_token);\n                })\n                .catch(err => {\n                    localStorage.removeItem(\"authToken\");\n                    localStorage.removeItem(\"refreshToken\");\n                    // dispatch(logoutAction());\n                    throw err;\n                });\n            return;\n        }\n        try {\n            TokenApi.postVerifyToken()\n                .then(resp => {\n                    changeLoginStatus(true);\n                })\n                .catch(error => {\n                    localStorage.removeItem(\"authToken\");\n                    localStorage.removeItem(\"refreshToken\");\n                    changeLoginStatus(false);\n                    throw error;\n                });\n        } catch (e) {\n            localStorage.removeItem(\"authToken\");\n            changeLoginStatus(false);\n            throw e;\n        }\n    },\n\n    verifyTokenAdmin: () => {\n        if (!localStorage.getItem(\"authToken\")) {\n            if (!localStorage.getItem(\"refreshToken\")) {\n                localStorage.removeItem(\"authToken\");\n                localStorage.removeItem(\"refreshToken\");\n                return false;\n            }\n            TokenApi.postVerifyRefreshToken()\n                .then(res => {\n                    const { permission } = jwtDecode(res.access_token).user;\n                    localStorage.setItem(res.access_token);\n                    console.log(jwtDecode(res.access_token));\n                    if (permission === USER_TYPE.ADMIN) return true;\n                    return true;\n                })\n                .catch(err => {\n                    localStorage.removeItem(\"authToken\");\n                    localStorage.removeItem(\"refreshToken\");\n                    return false; // dispatch(logoutAction());\n                });\n            return true;\n        }\n        try {\n            TokenApi.postVerifyToken()\n                .then(resp => {\n                    if (resp.permission === USER_TYPE.ADMIN) return true;\n                    return false;\n                })\n                .catch(error => {\n                    localStorage.removeItem(\"authToken\");\n                    localStorage.removeItem(\"refreshToken\");\n                    return false;\n                });\n            return true;\n        } catch (e) {\n            localStorage.removeItem(\"authToken\");\n            return false;\n        }\n        // return true;\n    },\n    login: (username, password) => {\n        return new Promise((resolve, reject) => {\n            ws.login(username, password)\n                .then(res => {\n                    let auth = JSON.parse(res);\n                    if (auth.auth === true && auth.authToken && auth.refreshToken) {\n                        localStorage.setItem(\"authToken\", auth.authToken);\n                        localStorage.setItem(\"refreshToken\", auth.refreshToken);\n                        // localStorage.setItem(\"role\", auth.permission);\n                        resolve(true);\n                    }\n\n                    resolve(false);\n                })\n                .catch(err => {\n                    console.log(\"ERR AuthSerivce: \" + err);\n                });\n        });\n    },\n\n    logout: () => {\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"refreshToken\");\n    },\n\n    isLoggedIn: () => {\n        const authToken = localStorage.getItem(\"authToken\");\n        return new Promise((resolve, reject) => {\n            if (!authToken) {\n                resolve({\n                    tokenIsValid: false\n                });\n            } else {\n                const { user } = jwtDecode(authToken);\n                if (!user) {\n                    resolve({\n                        tokenIsValid: false\n                    });\n                } else {\n                    resolve({\n                        tokenIsValid: true,\n                        username: user.username,\n                        permission: user.permission,\n                        emailIsVerified: true\n                    });\n                }\n            }\n        });\n    },\n\n    saveToken: token => {\n        console.log(token);\n        localStorage.setItem(\"authToken\", token);\n    },\n    saveRefreshToken: token => {\n        console.log(token);\n        localStorage.setItem(\"refreshToken\", token);\n    },\n\n    getToken: () => {\n        let authToken = localStorage.getItem(\"authToken\");\n        return new Promise((resolve, reject) => {\n            ws.readAccountInfo(authToken).then(res => {\n                let resObj = JSON.parse(res);\n                if (resObj.status.status === \"TRUE\") {\n                    resolve(authToken);\n                } else {\n                    resolve(null);\n                }\n            });\n        });\n    },\n\n    getTokenUnsafe: () => {\n        return localStorage.getItem(\"authToken\");\n    }\n};\n"]},"metadata":{},"sourceType":"module"}