{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _Object$values = require('babel-runtime/core-js/object/values')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Collapse = require('./Collapse');\n\nvar _Collapse2 = _interopRequireDefault(_Collapse);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsStyleConfig = require('./utils/StyleConfig'); // TODO: Use uncontrollable.\n\n\nvar propTypes = {\n  collapsible: _react2['default'].PropTypes.bool,\n  onSelect: _react2['default'].PropTypes.func,\n  header: _react2['default'].PropTypes.node,\n  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),\n  footer: _react2['default'].PropTypes.node,\n  defaultExpanded: _react2['default'].PropTypes.bool,\n  expanded: _react2['default'].PropTypes.bool,\n  eventKey: _react2['default'].PropTypes.any,\n  headerRole: _react2['default'].PropTypes.string,\n  panelRole: _react2['default'].PropTypes.string,\n  // From Collapse.\n  onEnter: _react2['default'].PropTypes.func,\n  onEntering: _react2['default'].PropTypes.func,\n  onEntered: _react2['default'].PropTypes.func,\n  onExit: _react2['default'].PropTypes.func,\n  onExiting: _react2['default'].PropTypes.func,\n  onExited: _react2['default'].PropTypes.func\n};\nvar defaultProps = {\n  defaultExpanded: false\n};\n\nvar Panel = function (_React$Component) {\n  _inherits(Panel, _React$Component);\n\n  function Panel(props, context) {\n    _classCallCheck(this, Panel);\n\n    _React$Component.call(this, props, context);\n\n    this.handleClickTitle = this.handleClickTitle.bind(this);\n    this.state = {\n      expanded: this.props.defaultExpanded\n    };\n  }\n\n  Panel.prototype.handleClickTitle = function handleClickTitle(e) {\n    // FIXME: What the heck? This API is horrible. This needs to go away!\n    e.persist();\n    e.selected = true;\n\n    if (this.props.onSelect) {\n      this.props.onSelect(this.props.eventKey, e);\n    } else {\n      e.preventDefault();\n    }\n\n    if (e.selected) {\n      this.setState({\n        expanded: !this.state.expanded\n      });\n    }\n  };\n\n  Panel.prototype.shouldRenderFill = function shouldRenderFill(child) {\n    return _react2['default'].isValidElement(child) && child.props.fill != null;\n  };\n\n  Panel.prototype.renderHeader = function renderHeader(collapsible, header, id, role, expanded, bsProps) {\n    var titleClassName = _utilsBootstrapUtils.prefix(bsProps, 'title');\n\n    if (!collapsible) {\n      if (!_react2['default'].isValidElement(header)) {\n        return header;\n      }\n\n      return _react.cloneElement(header, {\n        className: _classnames2['default'](header.props.className, titleClassName)\n      });\n    }\n\n    if (!_react2['default'].isValidElement(header)) {\n      return _react2['default'].createElement('h4', {\n        role: 'presentation',\n        className: titleClassName\n      }, this.renderAnchor(header, id, role, expanded));\n    }\n\n    return _react.cloneElement(header, {\n      className: _classnames2['default'](header.props.className, titleClassName),\n      children: this.renderAnchor(header.props.children, role)\n    });\n  };\n\n  Panel.prototype.renderAnchor = function renderAnchor(header, id, role, expanded) {\n    return _react2['default'].createElement('a', {\n      role: role,\n      href: id && '#' + id,\n      onClick: this.handleClickTitle,\n      'aria-controls': id,\n      'aria-expanded': expanded,\n      'aria-selected': expanded\n    }, header);\n  };\n\n  Panel.prototype.renderCollapsibleBody = function renderCollapsibleBody(id, expanded, role, children, bsProps, animationHooks) {\n    return _react2['default'].createElement(_Collapse2['default'], _extends({\n      'in': expanded\n    }, animationHooks), _react2['default'].createElement('div', {\n      id: id,\n      role: role,\n      className: _utilsBootstrapUtils.prefix(bsProps, 'collapse'),\n      'aria-hidden': !expanded\n    }, this.renderBody(children, bsProps)));\n  };\n\n  Panel.prototype.renderBody = function renderBody(rawChildren, bsProps) {\n    var children = [];\n    var bodyChildren = [];\n\n    var bodyClassName = _utilsBootstrapUtils.prefix(bsProps, 'body');\n\n    function maybeAddBody() {\n      if (!bodyChildren.length) {\n        return;\n      } // Derive the key from the index here, since we need to make one up.\n\n\n      children.push(_react2['default'].createElement('div', {\n        key: children.length,\n        className: bodyClassName\n      }, bodyChildren));\n      bodyChildren = [];\n    } // Convert to array so we can re-use keys.\n\n\n    _react2['default'].Children.toArray(rawChildren).forEach(function (child) {\n      if (_react2['default'].isValidElement(child) && child.props.fill) {\n        maybeAddBody(); // Remove the child's unknown `fill` prop.\n\n        children.push(_react.cloneElement(child, {\n          fill: undefined\n        }));\n        return;\n      }\n\n      bodyChildren.push(child);\n    });\n\n    maybeAddBody();\n    return children;\n  };\n\n  Panel.prototype.render = function render() {\n    var _props = this.props;\n    var collapsible = _props.collapsible;\n    var header = _props.header;\n    var id = _props.id;\n    var footer = _props.footer;\n    var propsExpanded = _props.expanded;\n    var headerRole = _props.headerRole;\n    var panelRole = _props.panelRole;\n    var className = _props.className;\n    var children = _props.children;\n    var onEnter = _props.onEnter;\n    var onEntering = _props.onEntering;\n    var onEntered = _props.onEntered;\n    var onExit = _props.onExit;\n    var onExiting = _props.onExiting;\n    var onExited = _props.onExited;\n\n    var props = _objectWithoutProperties(_props, ['collapsible', 'header', 'id', 'footer', 'expanded', 'headerRole', 'panelRole', 'className', 'children', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited']);\n\n    var _splitBsPropsAndOmit = _utilsBootstrapUtils.splitBsPropsAndOmit(props, ['defaultExpanded', 'eventKey', 'onSelect']);\n\n    var bsProps = _splitBsPropsAndOmit[0];\n    var elementProps = _splitBsPropsAndOmit[1];\n    var expanded = propsExpanded != null ? propsExpanded : this.state.expanded;\n\n    var classes = _utilsBootstrapUtils.getClassSet(bsProps);\n\n    return _react2['default'].createElement('div', _extends({}, elementProps, {\n      className: _classnames2['default'](className, classes),\n      id: collapsible ? null : id\n    }), header && _react2['default'].createElement('div', {\n      className: _utilsBootstrapUtils.prefix(bsProps, 'heading')\n    }, this.renderHeader(collapsible, header, id, headerRole, expanded, bsProps)), collapsible ? this.renderCollapsibleBody(id, expanded, panelRole, children, bsProps, {\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited\n    }) : this.renderBody(children, bsProps), footer && _react2['default'].createElement('div', {\n      className: _utilsBootstrapUtils.prefix(bsProps, 'footer')\n    }, footer));\n  };\n\n  return Panel;\n}(_react2['default'].Component);\n\nPanel.propTypes = propTypes;\nPanel.defaultProps = defaultProps;\nexports['default'] = _utilsBootstrapUtils.bsClass('panel', _utilsBootstrapUtils.bsStyles([].concat(_Object$values(_utilsStyleConfig.State), [_utilsStyleConfig.Style.DEFAULT, _utilsStyleConfig.Style.PRIMARY]), _utilsStyleConfig.Style.DEFAULT, Panel));\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}