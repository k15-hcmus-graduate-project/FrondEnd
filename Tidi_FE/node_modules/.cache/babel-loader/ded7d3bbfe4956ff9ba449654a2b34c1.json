{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _domHelpersStyle = require('dom-helpers/style');\n\nvar _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactOverlaysLibTransition = require('react-overlays/lib/Transition');\n\nvar _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);\n\nvar _utilsCapitalize = require('./utils/capitalize');\n\nvar _utilsCapitalize2 = _interopRequireDefault(_utilsCapitalize);\n\nvar _utilsCreateChainedFunction = require('./utils/createChainedFunction');\n\nvar _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);\n\nvar MARGINS = {\n  height: ['marginTop', 'marginBottom'],\n  width: ['marginLeft', 'marginRight']\n}; // reading a dimension prop will cause the browser to recalculate,\n// which will let our animations work\n\nfunction triggerBrowserReflow(node) {\n  node.offsetHeight; // eslint-disable-line no-unused-expressions\n}\n\nfunction getDimensionValue(dimension, elem) {\n  var value = elem['offset' + _utilsCapitalize2['default'](dimension)];\n\n  var margins = MARGINS[dimension];\n  return value + parseInt(_domHelpersStyle2['default'](elem, margins[0]), 10) + parseInt(_domHelpersStyle2['default'](elem, margins[1]), 10);\n}\n\nvar propTypes = {\n  /**\n   * Show the component; triggers the expand or collapse animation\n   */\n  'in': _react2['default'].PropTypes.bool,\n\n  /**\n   * Unmount the component (remove it from the DOM) when it is collapsed\n   */\n  unmountOnExit: _react2['default'].PropTypes.bool,\n\n  /**\n   * Run the expand animation when the component mounts, if it is initially\n   * shown\n   */\n  transitionAppear: _react2['default'].PropTypes.bool,\n\n  /**\n   * Duration of the collapse animation in milliseconds, to ensure that\n   * finishing callbacks are fired even if the original browser transition end\n   * events are canceled\n   */\n  timeout: _react2['default'].PropTypes.number,\n\n  /**\n   * Callback fired before the component expands\n   */\n  onEnter: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired after the component starts to expand\n   */\n  onEntering: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired after the component has expanded\n   */\n  onEntered: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired before the component collapses\n   */\n  onExit: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired after the component starts to collapse\n   */\n  onExiting: _react2['default'].PropTypes.func,\n\n  /**\n   * Callback fired after the component has collapsed\n   */\n  onExited: _react2['default'].PropTypes.func,\n\n  /**\n   * The dimension used when collapsing, or a function that returns the\n   * dimension\n   *\n   * _Note: Bootstrap only partially supports 'width'!\n   * You will need to supply your own CSS animation for the `.width` CSS class._\n   */\n  dimension: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['height', 'width']), _react2['default'].PropTypes.func]),\n\n  /**\n   * Function that returns the height or width of the animating DOM node\n   *\n   * Allows for providing some custom logic for how much the Collapse component\n   * should animate in its specified dimension. Called with the current\n   * dimension prop value and the DOM node.\n   */\n  getDimensionValue: _react2['default'].PropTypes.func,\n\n  /**\n   * ARIA role of collapsible element\n   */\n  role: _react2['default'].PropTypes.string\n};\nvar defaultProps = {\n  'in': false,\n  timeout: 300,\n  unmountOnExit: false,\n  transitionAppear: false,\n  dimension: 'height',\n  getDimensionValue: getDimensionValue\n};\n\nvar Collapse = function (_React$Component) {\n  _inherits(Collapse, _React$Component);\n\n  function Collapse(props, context) {\n    _classCallCheck(this, Collapse);\n\n    _React$Component.call(this, props, context);\n\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleEntering = this.handleEntering.bind(this);\n    this.handleEntered = this.handleEntered.bind(this);\n    this.handleExit = this.handleExit.bind(this);\n    this.handleExiting = this.handleExiting.bind(this);\n  }\n  /* -- Expanding -- */\n\n\n  Collapse.prototype.handleEnter = function handleEnter(elem) {\n    var dimension = this._dimension();\n\n    elem.style[dimension] = '0';\n  };\n\n  Collapse.prototype.handleEntering = function handleEntering(elem) {\n    var dimension = this._dimension();\n\n    elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);\n  };\n\n  Collapse.prototype.handleEntered = function handleEntered(elem) {\n    var dimension = this._dimension();\n\n    elem.style[dimension] = null;\n  };\n  /* -- Collapsing -- */\n\n\n  Collapse.prototype.handleExit = function handleExit(elem) {\n    var dimension = this._dimension();\n\n    elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';\n  };\n\n  Collapse.prototype.handleExiting = function handleExiting(elem) {\n    var dimension = this._dimension();\n\n    triggerBrowserReflow(elem);\n    elem.style[dimension] = '0';\n  };\n\n  Collapse.prototype._dimension = function _dimension() {\n    return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;\n  }; // for testing\n\n\n  Collapse.prototype._getScrollDimensionValue = function _getScrollDimensionValue(elem, dimension) {\n    return elem['scroll' + _utilsCapitalize2['default'](dimension)] + 'px';\n  };\n\n  Collapse.prototype.render = function render() {\n    var _props = this.props;\n    var onEnter = _props.onEnter;\n    var onEntering = _props.onEntering;\n    var onEntered = _props.onEntered;\n    var onExit = _props.onExit;\n    var onExiting = _props.onExiting;\n    var className = _props.className;\n\n    var props = _objectWithoutProperties(_props, ['onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'className']);\n\n    delete props.dimension;\n    delete props.getDimensionValue;\n\n    var handleEnter = _utilsCreateChainedFunction2['default'](this.handleEnter, onEnter);\n\n    var handleEntering = _utilsCreateChainedFunction2['default'](this.handleEntering, onEntering);\n\n    var handleEntered = _utilsCreateChainedFunction2['default'](this.handleEntered, onEntered);\n\n    var handleExit = _utilsCreateChainedFunction2['default'](this.handleExit, onExit);\n\n    var handleExiting = _utilsCreateChainedFunction2['default'](this.handleExiting, onExiting);\n\n    var classes = {\n      width: this._dimension() === 'width'\n    };\n    return _react2['default'].createElement(_reactOverlaysLibTransition2['default'], _extends({}, props, {\n      'aria-expanded': props.role ? props['in'] : null,\n      className: _classnames2['default'](className, classes),\n      exitedClassName: 'collapse',\n      exitingClassName: 'collapsing',\n      enteredClassName: 'collapse in',\n      enteringClassName: 'collapsing',\n      onEnter: handleEnter,\n      onEntering: handleEntering,\n      onEntered: handleEntered,\n      onExit: handleExit,\n      onExiting: handleExiting\n    }));\n  };\n\n  return Collapse;\n}(_react2['default'].Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexports['default'] = Collapse;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}