{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.send = send;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions to deal with Push in Parse.\n * @class Parse.Push\n * @static\n * @hideconstructor\n */\n\n/**\n  * Sends a push notification.\n  * @method send\n  * @name Parse.Push.send\n  * @param {Object} data -  The data of the push notification.  Valid fields\n  * are:\n  *   <ol>\n  *     <li>channels - An Array of channels to push to.</li>\n  *     <li>push_time - A Date object for when to send the push.</li>\n  *     <li>expiration_time -  A Date object for when to expire\n  *         the push.</li>\n  *     <li>expiration_interval - The seconds from now to expire the push.</li>\n  *     <li>where - A Parse.Query over Parse.Installation that is used to match\n  *         a set of installations to push to.</li>\n  *     <li>data - The data to send as part of the push</li>\n  *   <ol>\n  * @param {Object} options An object that has an optional success function,\n  * that takes no arguments and will be called on a successful push, and\n  * an error function that takes a Parse.Error and will be called if the push\n  * failed.\n  * @return {Promise} A promise that is fulfilled when the push request\n  *     completes.\n  */\n\n\nfunction send(data\n/*: PushData*/\n, options\n/*:: ?: { useMasterKey?: boolean, success?: any, error?: any }*/\n)\n/*: Promise*/\n{\n  options = options || {};\n\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && (0, _typeof2.default)(data.push_time) === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  return _CoreManager.default.getPushController().send(data, {\n    useMasterKey: options.useMasterKey\n  });\n}\n\nvar DefaultController = {\n  send: function send(data\n  /*: PushData*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var request = RESTController.request('POST', 'push', data, {\n      useMasterKey: !!options.useMasterKey\n    });\n    return request;\n  }\n};\n\n_CoreManager.default.setPushController(DefaultController);","map":null,"metadata":{},"sourceType":"script"}