{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Parse.Config is a local representation of configuration data that\n * can be set from the Parse dashboard.\n *\n * @alias Parse.Config\n */\n\n\nvar ParseConfig =\n/*#__PURE__*/\nfunction () {\n  function ParseConfig() {\n    (0, _classCallCheck2.default)(this, ParseConfig);\n    (0, _defineProperty2.default)(this, \"attributes\", void 0);\n    (0, _defineProperty2.default)(this, \"_escapedAttributes\", void 0);\n    this.attributes = {};\n    this._escapedAttributes = {};\n  }\n  /**\n   * Gets the value of an attribute.\n   * @param {String} attr The name of an attribute.\n   */\n\n\n  (0, _createClass2.default)(ParseConfig, [{\n    key: \"get\",\n    value: function value(attr\n    /*: string*/\n    )\n    /*: any*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     * @param {String} attr The name of an attribute.\n     */\n\n  }, {\n    key: \"escape\",\n    value: function value(attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var html = this._escapedAttributes[attr];\n\n      if (html) {\n        return html;\n      }\n\n      var val = this.attributes[attr];\n      var escaped = '';\n\n      if (val != null) {\n        escaped = (0, _escape2.default)(val.toString());\n      }\n\n      this._escapedAttributes[attr] = escaped;\n      return escaped;\n    }\n    /**\n     * Retrieves the most recently-fetched configuration object, either from\n     * memory or from local storage if necessary.\n     *\n     * @static\n     * @return {Config} The most recently-fetched Parse.Config if it\n     *     exists, else an empty Parse.Config.\n     */\n\n  }], [{\n    key: \"current\",\n    value: function value() {\n      var controller = _CoreManager.default.getConfigController();\n\n      return controller.current();\n    }\n    /**\n     * Gets a new configuration object from the server.\n     * @static\n     * @return {Promise} A promise that is resolved with a newly-created\n     *     configuration object when the get completes.\n     */\n\n  }, {\n    key: \"get\",\n    value: function value() {\n      var controller = _CoreManager.default.getConfigController();\n\n      return controller.get();\n    }\n    /**\n     * Save value keys to the server.\n     * @static\n     * @return {Promise} A promise that is resolved with a newly-created\n     *     configuration object or with the current with the update.\n     */\n\n  }, {\n    key: \"save\",\n    value: function value(attrs) {\n      var controller = _CoreManager.default.getConfigController(); //To avoid a mismatch with the local and the cloud config we get a new version\n\n\n      return controller.save(attrs).then(function () {\n        return controller.get();\n      }, function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }]);\n  return ParseConfig;\n}();\n\nvar currentConfig = null;\nvar CURRENT_CONFIG_KEY = 'currentConfig';\n\nfunction decodePayload(data) {\n  try {\n    var json = JSON.parse(data);\n\n    if (json && (0, _typeof2.default)(json) === 'object') {\n      return (0, _decode.default)(json);\n    }\n  } catch (e) {\n    return null;\n  }\n}\n\nvar DefaultController = {\n  current: function current() {\n    if (currentConfig) {\n      return currentConfig;\n    }\n\n    var config = new ParseConfig();\n\n    var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);\n\n    var configData;\n\n    if (!_Storage.default.async()) {\n      configData = _Storage.default.getItem(storagePath);\n\n      if (configData) {\n        var attributes = decodePayload(configData);\n\n        if (attributes) {\n          config.attributes = attributes;\n          currentConfig = config;\n        }\n      }\n\n      return config;\n    } // Return a promise for async storage controllers\n\n\n    return _Storage.default.getItemAsync(storagePath).then(function (configData) {\n      if (configData) {\n        var _attributes = decodePayload(configData);\n\n        if (_attributes) {\n          config.attributes = _attributes;\n          currentConfig = config;\n        }\n      }\n\n      return config;\n    });\n  },\n  get: function get() {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'config', {}, {}).then(function (response) {\n      if (!response || !response.params) {\n        var error = new _ParseError.default(_ParseError.default.INVALID_JSON, 'Config JSON response invalid.');\n        return Promise.reject(error);\n      }\n\n      var config = new ParseConfig();\n      config.attributes = {};\n\n      for (var attr in response.params) {\n        config.attributes[attr] = (0, _decode.default)(response.params[attr]);\n      }\n\n      currentConfig = config;\n      return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), JSON.stringify(response.params)).then(function () {\n        return config;\n      });\n    });\n  },\n  save: function save(attrs) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var encodedAttrs = {};\n\n    for (var _key in attrs) {\n      encodedAttrs[_key] = (0, _encode.default)(attrs[_key]);\n    }\n\n    return RESTController.request('PUT', 'config', {\n      params: encodedAttrs\n    }, {\n      useMasterKey: true\n    }).then(function (response) {\n      if (response && response.result) {\n        return Promise.resolve();\n      } else {\n        var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, 'Error occured updating Config.');\n        return Promise.reject(error);\n      }\n    });\n  }\n};\n\n_CoreManager.default.setConfigController(DefaultController);\n\nvar _default = ParseConfig;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}