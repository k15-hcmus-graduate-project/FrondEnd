{"ast":null,"code":"// TODO: Remove this pragma once we upgrade eslint-config-airbnb.\n\n/* eslint-disable react/no-multi-comp */\n'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactPropTypesLibElementType = require('react-prop-types/lib/elementType');\n\nvar _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);\n\nvar _uncontrollable = require('uncontrollable');\n\nvar _uncontrollable2 = _interopRequireDefault(_uncontrollable);\n\nvar _Grid = require('./Grid');\n\nvar _Grid2 = _interopRequireDefault(_Grid);\n\nvar _NavbarBrand = require('./NavbarBrand');\n\nvar _NavbarBrand2 = _interopRequireDefault(_NavbarBrand);\n\nvar _NavbarCollapse = require('./NavbarCollapse');\n\nvar _NavbarCollapse2 = _interopRequireDefault(_NavbarCollapse);\n\nvar _NavbarHeader = require('./NavbarHeader');\n\nvar _NavbarHeader2 = _interopRequireDefault(_NavbarHeader);\n\nvar _NavbarToggle = require('./NavbarToggle');\n\nvar _NavbarToggle2 = _interopRequireDefault(_NavbarToggle);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsStyleConfig = require('./utils/StyleConfig');\n\nvar propTypes = {\n  /**\n   * Create a fixed navbar along the top of the screen, that scrolls with the\n   * page\n   */\n  fixedTop: _react2['default'].PropTypes.bool,\n\n  /**\n   * Create a fixed navbar along the bottom of the screen, that scrolls with\n   * the page\n   */\n  fixedBottom: _react2['default'].PropTypes.bool,\n\n  /**\n   * Create a full-width navbar that scrolls away with the page\n   */\n  staticTop: _react2['default'].PropTypes.bool,\n\n  /**\n   * An alternative dark visual style for the Navbar\n   */\n  inverse: _react2['default'].PropTypes.bool,\n\n  /**\n   * Allow the Navbar to fluidly adjust to the page or container width, instead\n   * of at the predefined screen breakpoints\n   */\n  fluid: _react2['default'].PropTypes.bool,\n\n  /**\n   * Set a custom element for this component.\n   */\n  componentClass: _reactPropTypesLibElementType2['default'],\n\n  /**\n   * A callback fired when the `<Navbar>` body collapses or expands. Fired when\n   * a `<Navbar.Toggle>` is clicked and called with the new `navExpanded`\n   * boolean value.\n   *\n   * @controllable navExpanded\n   */\n  onToggle: _react2['default'].PropTypes.func,\n\n  /**\n   * Explicitly set the visiblity of the navbar body\n   *\n   * @controllable onToggle\n   */\n  expanded: _react2['default'].PropTypes.bool,\n  role: _react2['default'].PropTypes.string\n};\nvar defaultProps = {\n  componentClass: 'nav',\n  fixedTop: false,\n  fixedBottom: false,\n  staticTop: false,\n  inverse: false,\n  fluid: false\n};\nvar childContextTypes = {\n  $bs_navbar: _react.PropTypes.shape({\n    bsClass: _react.PropTypes.string,\n    expanded: _react.PropTypes.bool,\n    onToggle: _react.PropTypes.func.isRequired\n  })\n};\n\nvar Navbar = function (_React$Component) {\n  _inherits(Navbar, _React$Component);\n\n  function Navbar(props, context) {\n    _classCallCheck(this, Navbar);\n\n    _React$Component.call(this, props, context);\n\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  Navbar.prototype.getChildContext = function getChildContext() {\n    var _props = this.props;\n    var bsClass = _props.bsClass;\n    var expanded = _props.expanded;\n    return {\n      $bs_navbar: {\n        bsClass: bsClass,\n        expanded: expanded,\n        onToggle: this.handleToggle\n      }\n    };\n  };\n\n  Navbar.prototype.handleToggle = function handleToggle() {\n    var _props2 = this.props;\n    var onToggle = _props2.onToggle;\n    var expanded = _props2.expanded;\n    onToggle(!expanded);\n  };\n\n  Navbar.prototype.render = function render() {\n    var _extends2;\n\n    var _props3 = this.props;\n    var Component = _props3.componentClass;\n    var fixedTop = _props3.fixedTop;\n    var fixedBottom = _props3.fixedBottom;\n    var staticTop = _props3.staticTop;\n    var inverse = _props3.inverse;\n    var fluid = _props3.fluid;\n    var className = _props3.className;\n    var children = _props3.children;\n\n    var props = _objectWithoutProperties(_props3, ['componentClass', 'fixedTop', 'fixedBottom', 'staticTop', 'inverse', 'fluid', 'className', 'children']);\n\n    var _splitBsPropsAndOmit = _utilsBootstrapUtils.splitBsPropsAndOmit(props, ['expanded', 'onToggle']);\n\n    var bsProps = _splitBsPropsAndOmit[0];\n    var elementProps = _splitBsPropsAndOmit[1]; // will result in some false positives but that seems better\n    // than false negatives. strict `undefined` check allows explicit\n    // \"nulling\" of the role if the user really doesn't want one\n\n    if (elementProps.role === undefined && Component !== 'nav') {\n      elementProps.role = 'navigation';\n    }\n\n    if (inverse) {\n      bsProps.bsStyle = _utilsStyleConfig.Style.INVERSE;\n    }\n\n    var classes = _extends({}, _utilsBootstrapUtils.getClassSet(bsProps), (_extends2 = {}, _extends2[_utilsBootstrapUtils.prefix(bsProps, 'fixed-top')] = fixedTop, _extends2[_utilsBootstrapUtils.prefix(bsProps, 'fixed-bottom')] = fixedBottom, _extends2[_utilsBootstrapUtils.prefix(bsProps, 'static-top')] = staticTop, _extends2));\n\n    return _react2['default'].createElement(Component, _extends({}, elementProps, {\n      className: _classnames2['default'](className, classes)\n    }), _react2['default'].createElement(_Grid2['default'], {\n      fluid: fluid\n    }, children));\n  };\n\n  return Navbar;\n}(_react2['default'].Component);\n\nNavbar.propTypes = propTypes;\nNavbar.defaultProps = defaultProps;\nNavbar.childContextTypes = childContextTypes;\n\n_utilsBootstrapUtils.bsClass('navbar', Navbar);\n\nvar UncontrollableNavbar = _uncontrollable2['default'](Navbar, {\n  expanded: 'onToggle'\n});\n\nfunction createSimpleWrapper(tag, suffix, displayName) {\n  var Wrapper = function Wrapper(_ref, _ref2) {\n    var Component = _ref.componentClass;\n    var className = _ref.className;\n    var pullRight = _ref.pullRight;\n    var pullLeft = _ref.pullLeft;\n\n    var props = _objectWithoutProperties(_ref, ['componentClass', 'className', 'pullRight', 'pullLeft']);\n\n    var _ref2$$bs_navbar = _ref2.$bs_navbar;\n    var navbarProps = _ref2$$bs_navbar === undefined ? {\n      bsClass: 'navbar'\n    } : _ref2$$bs_navbar;\n    return _react2['default'].createElement(Component, _extends({}, props, {\n      className: _classnames2['default'](className, _utilsBootstrapUtils.prefix(navbarProps, suffix), pullRight && _utilsBootstrapUtils.prefix(navbarProps, 'right'), pullLeft && _utilsBootstrapUtils.prefix(navbarProps, 'left'))\n    }));\n  };\n\n  Wrapper.displayName = displayName;\n  Wrapper.propTypes = {\n    componentClass: _reactPropTypesLibElementType2['default'],\n    pullRight: _react2['default'].PropTypes.bool,\n    pullLeft: _react2['default'].PropTypes.bool\n  };\n  Wrapper.defaultProps = {\n    componentClass: tag,\n    pullRight: false,\n    pullLeft: false\n  };\n  Wrapper.contextTypes = {\n    $bs_navbar: _react.PropTypes.shape({\n      bsClass: _react.PropTypes.string\n    })\n  };\n  return Wrapper;\n}\n\nUncontrollableNavbar.Brand = _NavbarBrand2['default'];\nUncontrollableNavbar.Header = _NavbarHeader2['default'];\nUncontrollableNavbar.Toggle = _NavbarToggle2['default'];\nUncontrollableNavbar.Collapse = _NavbarCollapse2['default'];\nUncontrollableNavbar.Form = createSimpleWrapper('div', 'form', 'NavbarForm');\nUncontrollableNavbar.Text = createSimpleWrapper('p', 'text', 'NavbarText');\nUncontrollableNavbar.Link = createSimpleWrapper('a', 'link', 'NavbarLink'); // Set bsStyles here so they can be overridden.\n\nexports['default'] = _utilsBootstrapUtils.bsStyles([_utilsStyleConfig.Style.DEFAULT, _utilsStyleConfig.Style.INVERSE], _utilsStyleConfig.Style.DEFAULT, UncontrollableNavbar);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}