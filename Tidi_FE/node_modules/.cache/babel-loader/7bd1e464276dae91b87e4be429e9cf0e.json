{"ast":null,"code":"// import React, { Component } from \"react\";\n// import { Grid, Col, Row } from \"react-bootstrap\";\n// import PlaceSearch from \"./PlaceSearch.js\";\n// import axios from \"axios\";\n// class PlacePlanner extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             app_id: props.app_id,\n//             app_code: props.app_code,\n//             places: {},\n//             selected: {},\n//             nearest: {}\n//         };\n//     }\n//     componentDidMount = () => {\n//         console.log(this.props);\n//     };\n//     addPlaces = (idx, results, lat, lng) => {\n//         // Update places with new search results\n//         let places = this.state.places;\n//         places[idx] = results;\n//         // Combine all results across searched places where a selection has\n//         // not yet been made as our options for next destination\n//         let options = [];\n//         for (var p in places) {\n//             if (typeof this.state.selected[p] === \"undefined\") {\n//                 for (var o in places[p]) {\n//                     options.push({\n//                         lat: places[p][o].position[0],\n//                         lng: places[p][o].position[1],\n//                         id: places[p][o].id\n//                     });\n//                 }\n//             }\n//         }\n//         // Final option selected so no need to continue\n//         if (options.length === 0) {\n//             return;\n//         }\n//         // Will build parameters including all of the potential destinations\n//         let params = {\n//             app_id: this.state.app_id,\n//             app_code: this.state.app_code,\n//             mode: \"fastest;car;traffic:enabled\",\n//             matrixAttributes: \"ix,su\",\n//             summaryattributes: \"all\",\n//             start0: lat + \",\" + lng\n//         };\n//         for (var i = 0; i < options.length; i++) {\n//             params[\"destination\" + i] = options[i].lat + \",\" + options[i].lng;\n//         }\n//         // Calculate matrix routing among options to make a recommendation\n//         const self = this;\n//         axios.get(\"https://matrix.route.api.here.com/routing/7.2/calculatematrix.json\", { params: params }).then(function(response) {\n//             const matrix = response.data.response.matrixEntry;\n//             let nearest = matrix[0].summary;\n//             nearest[\"id\"] = options[0].id;\n//             for (var i = 0; i < matrix.length; i++) {\n//                 if (matrix[i].summary.costFactor < nearest.costFactor) {\n//                     nearest = matrix[i].summary;\n//                     nearest.id = options[i].id;\n//                 }\n//             }\n//             self.setState({\n//                 nearest: nearest\n//             });\n//         });\n//         // TODO: display costfactor / time estimate for next choice\n//         this.setState({ places: places });\n//     };\n//     findNearest = idx => {\n//         let selected = this.state.selected;\n//         selected[idx] = true;\n//         this.setState({\n//             selected: selected\n//         });\n//         this.addPlaces(idx, [], this.props.lat, this.props.lng);\n//     };\n//     render = () => {\n//         return (\n//             <Grid>\n//                 <Row>\n//                     <Col xs={3} md={3}>\n//                         <PlaceSearch\n//                             idx={0}\n//                             app_id={this.state.app_id}\n//                             app_code={this.state.app_code}\n//                             lat={this.props.lat}\n//                             lng={this.props.lng}\n//                             nearest={this.state.nearest.id}\n//                             addPlaces={this.addPlaces}\n//                             findNearest={this.findNearest}\n//                         />\n//                     </Col>\n//                     <Col xs={3} md={3}>\n//                         <PlaceSearch\n//                             idx={1}\n//                             app_id={this.state.app_id}\n//                             app_code={this.state.app_code}\n//                             lat={this.props.lat}\n//                             lng={this.props.lng}\n//                             nearest={this.state.nearest.id}\n//                             addPlaces={this.addPlaces}\n//                             findNearest={this.findNearest}\n//                         />\n//                     </Col>\n//                     <Col xs={3} md={3}>\n//                         <PlaceSearch\n//                             idx={2}\n//                             app_id={this.state.app_id}\n//                             app_code={this.state.app_code}\n//                             lat={this.props.lat}\n//                             lng={this.props.lng}\n//                             nearest={this.state.nearest.id}\n//                             addPlaces={this.addPlaces}\n//                             findNearest={this.findNearest}\n//                         />\n//                     </Col>\n//                     <Col xs={3} md={3}>\n//                         <PlaceSearch\n//                             idx={3}\n//                             app_id={this.state.app_id}\n//                             app_code={this.state.app_code}\n//                             lat={this.props.lat}\n//                             lng={this.props.lng}\n//                             nearest={this.state.nearest.id}\n//                             addPlaces={this.addPlaces}\n//                             findNearest={this.findNearest}\n//                         />\n//                     </Col>\n//                 </Row>\n//             </Grid>\n//         );\n//     };\n// }\n// export default PlacePlanner;","map":{"version":3,"sources":["/Users/lap12548/Documents/hcmus/TOTNGHIEP/GITHUB/FrondEnd/Tidi_FE/src/pages/direction/Directions/PlacePlanner.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from \"react\";\n// import { Grid, Col, Row } from \"react-bootstrap\";\n// import PlaceSearch from \"./PlaceSearch.js\";\n// import axios from \"axios\";\n\n// class PlacePlanner extends Component {\n//     constructor(props) {\n//         super(props);\n\n//         this.state = {\n//             app_id: props.app_id,\n//             app_code: props.app_code,\n//             places: {},\n//             selected: {},\n//             nearest: {}\n//         };\n//     }\n\n//     componentDidMount = () => {\n//         console.log(this.props);\n//     };\n//     addPlaces = (idx, results, lat, lng) => {\n//         // Update places with new search results\n//         let places = this.state.places;\n//         places[idx] = results;\n\n//         // Combine all results across searched places where a selection has\n//         // not yet been made as our options for next destination\n//         let options = [];\n//         for (var p in places) {\n//             if (typeof this.state.selected[p] === \"undefined\") {\n//                 for (var o in places[p]) {\n//                     options.push({\n//                         lat: places[p][o].position[0],\n//                         lng: places[p][o].position[1],\n//                         id: places[p][o].id\n//                     });\n//                 }\n//             }\n//         }\n\n//         // Final option selected so no need to continue\n//         if (options.length === 0) {\n//             return;\n//         }\n\n//         // Will build parameters including all of the potential destinations\n//         let params = {\n//             app_id: this.state.app_id,\n//             app_code: this.state.app_code,\n//             mode: \"fastest;car;traffic:enabled\",\n//             matrixAttributes: \"ix,su\",\n//             summaryattributes: \"all\",\n//             start0: lat + \",\" + lng\n//         };\n//         for (var i = 0; i < options.length; i++) {\n//             params[\"destination\" + i] = options[i].lat + \",\" + options[i].lng;\n//         }\n\n//         // Calculate matrix routing among options to make a recommendation\n//         const self = this;\n//         axios.get(\"https://matrix.route.api.here.com/routing/7.2/calculatematrix.json\", { params: params }).then(function(response) {\n//             const matrix = response.data.response.matrixEntry;\n\n//             let nearest = matrix[0].summary;\n//             nearest[\"id\"] = options[0].id;\n\n//             for (var i = 0; i < matrix.length; i++) {\n//                 if (matrix[i].summary.costFactor < nearest.costFactor) {\n//                     nearest = matrix[i].summary;\n//                     nearest.id = options[i].id;\n//                 }\n//             }\n//             self.setState({\n//                 nearest: nearest\n//             });\n//         });\n\n//         // TODO: display costfactor / time estimate for next choice\n\n//         this.setState({ places: places });\n//     };\n\n//     findNearest = idx => {\n//         let selected = this.state.selected;\n//         selected[idx] = true;\n//         this.setState({\n//             selected: selected\n//         });\n//         this.addPlaces(idx, [], this.props.lat, this.props.lng);\n//     };\n\n//     render = () => {\n//         return (\n//             <Grid>\n//                 <Row>\n//                     <Col xs={3} md={3}>\n//                         <PlaceSearch\n//                             idx={0}\n//                             app_id={this.state.app_id}\n//                             app_code={this.state.app_code}\n//                             lat={this.props.lat}\n//                             lng={this.props.lng}\n//                             nearest={this.state.nearest.id}\n//                             addPlaces={this.addPlaces}\n//                             findNearest={this.findNearest}\n//                         />\n//                     </Col>\n//                     <Col xs={3} md={3}>\n//                         <PlaceSearch\n//                             idx={1}\n//                             app_id={this.state.app_id}\n//                             app_code={this.state.app_code}\n//                             lat={this.props.lat}\n//                             lng={this.props.lng}\n//                             nearest={this.state.nearest.id}\n//                             addPlaces={this.addPlaces}\n//                             findNearest={this.findNearest}\n//                         />\n//                     </Col>\n//                     <Col xs={3} md={3}>\n//                         <PlaceSearch\n//                             idx={2}\n//                             app_id={this.state.app_id}\n//                             app_code={this.state.app_code}\n//                             lat={this.props.lat}\n//                             lng={this.props.lng}\n//                             nearest={this.state.nearest.id}\n//                             addPlaces={this.addPlaces}\n//                             findNearest={this.findNearest}\n//                         />\n//                     </Col>\n//                     <Col xs={3} md={3}>\n//                         <PlaceSearch\n//                             idx={3}\n//                             app_id={this.state.app_id}\n//                             app_code={this.state.app_code}\n//                             lat={this.props.lat}\n//                             lng={this.props.lng}\n//                             nearest={this.state.nearest.id}\n//                             addPlaces={this.addPlaces}\n//                             findNearest={this.findNearest}\n//                         />\n//                     </Col>\n//                 </Row>\n//             </Grid>\n//         );\n//     };\n// }\n\n// export default PlacePlanner;\n"]},"metadata":{},"sourceType":"module"}